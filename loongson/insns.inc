/* This file is autogenerated by scripts/decodetree.py.  */

typedef struct {
    int cj;
    int offs;
} arg_c_offs;

typedef struct {
    int cd;
    int fj;
} arg_cf;

typedef struct {
    int cd;
    int fj;
    int fk;
    int fcond;
} arg_cff_fcond;

typedef struct {
    int cop;
    int rj;
    int imm;
} arg_cop_r_i;

typedef struct {
    int cd;
    int rj;
} arg_cr;

typedef struct {
} arg_empty;

typedef struct {
    int fd;
    int cj;
} arg_fc;

typedef struct {
    int fcsrd;
    int rj;
} arg_fcsrd_r;

typedef struct {
    int fd;
    int fj;
} arg_ff;

typedef struct {
    int fd;
    int fj;
    int fk;
} arg_fff;

typedef struct {
    int fd;
    int fj;
    int fk;
    int ca;
} arg_fffc;

typedef struct {
    int fd;
    int fj;
    int fk;
    int fa;
} arg_ffff;

typedef struct {
    int fd;
    int rj;
} arg_fr;

typedef struct {
    int fd;
    int rj;
    int imm;
} arg_fr_i;

typedef struct {
    int fd;
    int rj;
    int rk;
} arg_frr;

typedef struct {
    int hint;
    int rj;
    int imm;
} arg_hint_r_i;

typedef struct {
    int imm;
} arg_i;

typedef struct {
    int imm;
    int rj;
    int rk;
} arg_i_rr;

typedef struct {
    int rj;
    int imm;
} arg_j_i;

typedef struct {
    int offs;
} arg_offs;

typedef struct {
    int rd;
    int csr;
} arg_r_csr;

typedef struct {
    int rd;
    int fcsrs;
} arg_r_fcsrs;

typedef struct {
    int rd;
    int imm;
} arg_r_i;

typedef struct {
    int rj;
    int offs;
} arg_r_offs;

typedef struct {
    int rd;
    int cj;
} arg_rc;

typedef struct {
    int rd;
    int fj;
} arg_rf;

typedef struct {
    int rd;
    int rj;
} arg_rr;

typedef struct {
    int rd;
    int rj;
    int csr;
} arg_rr_csr;

typedef struct {
    int rd;
    int rj;
    int imm;
} arg_rr_i;

typedef struct {
    int rj;
    int rk;
} arg_rr_jk;

typedef struct {
    int rd;
    int rj;
    int ms;
    int ls;
} arg_rr_ms_ls;

typedef struct {
    int rj;
    int rd;
    int offs;
} arg_rr_offs;

typedef struct {
    int rd;
    int rj;
    int rk;
} arg_rrr;

typedef struct {
    int rd;
    int rj;
    int rk;
    int sa;
} arg_rrr_sa;

typedef arg_rrr arg_add_w;
static bool trans_add_w(DisasContext *ctx, arg_add_w *a);
typedef arg_rrr arg_add_d;
static bool trans_add_d(DisasContext *ctx, arg_add_d *a);
typedef arg_rrr arg_sub_w;
static bool trans_sub_w(DisasContext *ctx, arg_sub_w *a);
typedef arg_rrr arg_sub_d;
static bool trans_sub_d(DisasContext *ctx, arg_sub_d *a);
typedef arg_rrr arg_slt;
static bool trans_slt(DisasContext *ctx, arg_slt *a);
typedef arg_rrr arg_sltu;
static bool trans_sltu(DisasContext *ctx, arg_sltu *a);
typedef arg_rr_i arg_slti;
static bool trans_slti(DisasContext *ctx, arg_slti *a);
typedef arg_rr_i arg_sltui;
static bool trans_sltui(DisasContext *ctx, arg_sltui *a);
typedef arg_rrr arg_nor;
static bool trans_nor(DisasContext *ctx, arg_nor *a);
typedef arg_rrr arg_and;
static bool trans_and(DisasContext *ctx, arg_and *a);
typedef arg_rrr arg_or;
static bool trans_or(DisasContext *ctx, arg_or *a);
typedef arg_rrr arg_xor;
static bool trans_xor(DisasContext *ctx, arg_xor *a);
typedef arg_rrr arg_orn;
static bool trans_orn(DisasContext *ctx, arg_orn *a);
typedef arg_rrr arg_andn;
static bool trans_andn(DisasContext *ctx, arg_andn *a);
typedef arg_rrr arg_mul_w;
static bool trans_mul_w(DisasContext *ctx, arg_mul_w *a);
typedef arg_rrr arg_mulh_w;
static bool trans_mulh_w(DisasContext *ctx, arg_mulh_w *a);
typedef arg_rrr arg_mulh_wu;
static bool trans_mulh_wu(DisasContext *ctx, arg_mulh_wu *a);
typedef arg_rrr arg_mul_d;
static bool trans_mul_d(DisasContext *ctx, arg_mul_d *a);
typedef arg_rrr arg_mulh_d;
static bool trans_mulh_d(DisasContext *ctx, arg_mulh_d *a);
typedef arg_rrr arg_mulh_du;
static bool trans_mulh_du(DisasContext *ctx, arg_mulh_du *a);
typedef arg_rrr arg_mulw_d_w;
static bool trans_mulw_d_w(DisasContext *ctx, arg_mulw_d_w *a);
typedef arg_rrr arg_mulw_d_wu;
static bool trans_mulw_d_wu(DisasContext *ctx, arg_mulw_d_wu *a);
typedef arg_rrr arg_div_w;
static bool trans_div_w(DisasContext *ctx, arg_div_w *a);
typedef arg_rrr arg_mod_w;
static bool trans_mod_w(DisasContext *ctx, arg_mod_w *a);
typedef arg_rrr arg_div_wu;
static bool trans_div_wu(DisasContext *ctx, arg_div_wu *a);
typedef arg_rrr arg_mod_wu;
static bool trans_mod_wu(DisasContext *ctx, arg_mod_wu *a);
typedef arg_rrr arg_div_d;
static bool trans_div_d(DisasContext *ctx, arg_div_d *a);
typedef arg_rrr arg_mod_d;
static bool trans_mod_d(DisasContext *ctx, arg_mod_d *a);
typedef arg_rrr arg_div_du;
static bool trans_div_du(DisasContext *ctx, arg_div_du *a);
typedef arg_rrr arg_mod_du;
static bool trans_mod_du(DisasContext *ctx, arg_mod_du *a);
typedef arg_rrr_sa arg_alsl_w;
static bool trans_alsl_w(DisasContext *ctx, arg_alsl_w *a);
typedef arg_rrr_sa arg_alsl_wu;
static bool trans_alsl_wu(DisasContext *ctx, arg_alsl_wu *a);
typedef arg_rrr_sa arg_alsl_d;
static bool trans_alsl_d(DisasContext *ctx, arg_alsl_d *a);
typedef arg_r_i arg_lu12i_w;
static bool trans_lu12i_w(DisasContext *ctx, arg_lu12i_w *a);
typedef arg_r_i arg_lu32i_d;
static bool trans_lu32i_d(DisasContext *ctx, arg_lu32i_d *a);
typedef arg_rr_i arg_lu52i_d;
static bool trans_lu52i_d(DisasContext *ctx, arg_lu52i_d *a);
typedef arg_r_i arg_pcaddi;
static bool trans_pcaddi(DisasContext *ctx, arg_pcaddi *a);
typedef arg_r_i arg_pcalau12i;
static bool trans_pcalau12i(DisasContext *ctx, arg_pcalau12i *a);
typedef arg_r_i arg_pcaddu12i;
static bool trans_pcaddu12i(DisasContext *ctx, arg_pcaddu12i *a);
typedef arg_r_i arg_pcaddu18i;
static bool trans_pcaddu18i(DisasContext *ctx, arg_pcaddu18i *a);
typedef arg_rr_i arg_addi_w;
static bool trans_addi_w(DisasContext *ctx, arg_addi_w *a);
typedef arg_rr_i arg_addi_d;
static bool trans_addi_d(DisasContext *ctx, arg_addi_d *a);
typedef arg_rr_i arg_addu16i_d;
static bool trans_addu16i_d(DisasContext *ctx, arg_addu16i_d *a);
typedef arg_rr_i arg_andi;
static bool trans_andi(DisasContext *ctx, arg_andi *a);
typedef arg_rr_i arg_ori;
static bool trans_ori(DisasContext *ctx, arg_ori *a);
typedef arg_rr_i arg_xori;
static bool trans_xori(DisasContext *ctx, arg_xori *a);
typedef arg_rrr arg_sll_w;
static bool trans_sll_w(DisasContext *ctx, arg_sll_w *a);
typedef arg_rrr arg_srl_w;
static bool trans_srl_w(DisasContext *ctx, arg_srl_w *a);
typedef arg_rrr arg_sra_w;
static bool trans_sra_w(DisasContext *ctx, arg_sra_w *a);
typedef arg_rrr arg_sll_d;
static bool trans_sll_d(DisasContext *ctx, arg_sll_d *a);
typedef arg_rrr arg_srl_d;
static bool trans_srl_d(DisasContext *ctx, arg_srl_d *a);
typedef arg_rrr arg_sra_d;
static bool trans_sra_d(DisasContext *ctx, arg_sra_d *a);
typedef arg_rrr arg_rotr_w;
static bool trans_rotr_w(DisasContext *ctx, arg_rotr_w *a);
typedef arg_rrr arg_rotr_d;
static bool trans_rotr_d(DisasContext *ctx, arg_rotr_d *a);
typedef arg_rr_i arg_slli_w;
static bool trans_slli_w(DisasContext *ctx, arg_slli_w *a);
typedef arg_rr_i arg_slli_d;
static bool trans_slli_d(DisasContext *ctx, arg_slli_d *a);
typedef arg_rr_i arg_srli_w;
static bool trans_srli_w(DisasContext *ctx, arg_srli_w *a);
typedef arg_rr_i arg_srli_d;
static bool trans_srli_d(DisasContext *ctx, arg_srli_d *a);
typedef arg_rr_i arg_srai_w;
static bool trans_srai_w(DisasContext *ctx, arg_srai_w *a);
typedef arg_rr_i arg_srai_d;
static bool trans_srai_d(DisasContext *ctx, arg_srai_d *a);
typedef arg_rr_i arg_rotri_w;
static bool trans_rotri_w(DisasContext *ctx, arg_rotri_w *a);
typedef arg_rr_i arg_rotri_d;
static bool trans_rotri_d(DisasContext *ctx, arg_rotri_d *a);
typedef arg_rr arg_ext_w_h;
static bool trans_ext_w_h(DisasContext *ctx, arg_ext_w_h *a);
typedef arg_rr arg_ext_w_b;
static bool trans_ext_w_b(DisasContext *ctx, arg_ext_w_b *a);
typedef arg_rr arg_clo_w;
static bool trans_clo_w(DisasContext *ctx, arg_clo_w *a);
typedef arg_rr arg_clz_w;
static bool trans_clz_w(DisasContext *ctx, arg_clz_w *a);
typedef arg_rr arg_cto_w;
static bool trans_cto_w(DisasContext *ctx, arg_cto_w *a);
typedef arg_rr arg_ctz_w;
static bool trans_ctz_w(DisasContext *ctx, arg_ctz_w *a);
typedef arg_rr arg_clo_d;
static bool trans_clo_d(DisasContext *ctx, arg_clo_d *a);
typedef arg_rr arg_clz_d;
static bool trans_clz_d(DisasContext *ctx, arg_clz_d *a);
typedef arg_rr arg_cto_d;
static bool trans_cto_d(DisasContext *ctx, arg_cto_d *a);
typedef arg_rr arg_ctz_d;
static bool trans_ctz_d(DisasContext *ctx, arg_ctz_d *a);
typedef arg_rr arg_revb_2h;
static bool trans_revb_2h(DisasContext *ctx, arg_revb_2h *a);
typedef arg_rr arg_revb_4h;
static bool trans_revb_4h(DisasContext *ctx, arg_revb_4h *a);
typedef arg_rr arg_revb_2w;
static bool trans_revb_2w(DisasContext *ctx, arg_revb_2w *a);
typedef arg_rr arg_revb_d;
static bool trans_revb_d(DisasContext *ctx, arg_revb_d *a);
typedef arg_rr arg_revh_2w;
static bool trans_revh_2w(DisasContext *ctx, arg_revh_2w *a);
typedef arg_rr arg_revh_d;
static bool trans_revh_d(DisasContext *ctx, arg_revh_d *a);
typedef arg_rr arg_bitrev_4b;
static bool trans_bitrev_4b(DisasContext *ctx, arg_bitrev_4b *a);
typedef arg_rr arg_bitrev_8b;
static bool trans_bitrev_8b(DisasContext *ctx, arg_bitrev_8b *a);
typedef arg_rr arg_bitrev_w;
static bool trans_bitrev_w(DisasContext *ctx, arg_bitrev_w *a);
typedef arg_rr arg_bitrev_d;
static bool trans_bitrev_d(DisasContext *ctx, arg_bitrev_d *a);
typedef arg_rrr_sa arg_bytepick_w;
static bool trans_bytepick_w(DisasContext *ctx, arg_bytepick_w *a);
typedef arg_rrr_sa arg_bytepick_d;
static bool trans_bytepick_d(DisasContext *ctx, arg_bytepick_d *a);
typedef arg_rrr arg_maskeqz;
static bool trans_maskeqz(DisasContext *ctx, arg_maskeqz *a);
typedef arg_rrr arg_masknez;
static bool trans_masknez(DisasContext *ctx, arg_masknez *a);
typedef arg_rr_ms_ls arg_bstrins_w;
static bool trans_bstrins_w(DisasContext *ctx, arg_bstrins_w *a);
typedef arg_rr_ms_ls arg_bstrpick_w;
static bool trans_bstrpick_w(DisasContext *ctx, arg_bstrpick_w *a);
typedef arg_rr_ms_ls arg_bstrins_d;
static bool trans_bstrins_d(DisasContext *ctx, arg_bstrins_d *a);
typedef arg_rr_ms_ls arg_bstrpick_d;
static bool trans_bstrpick_d(DisasContext *ctx, arg_bstrpick_d *a);
typedef arg_rr_i arg_ld_b;
static bool trans_ld_b(DisasContext *ctx, arg_ld_b *a);
typedef arg_rr_i arg_ld_h;
static bool trans_ld_h(DisasContext *ctx, arg_ld_h *a);
typedef arg_rr_i arg_ld_w;
static bool trans_ld_w(DisasContext *ctx, arg_ld_w *a);
typedef arg_rr_i arg_ld_d;
static bool trans_ld_d(DisasContext *ctx, arg_ld_d *a);
typedef arg_rr_i arg_st_b;
static bool trans_st_b(DisasContext *ctx, arg_st_b *a);
typedef arg_rr_i arg_st_h;
static bool trans_st_h(DisasContext *ctx, arg_st_h *a);
typedef arg_rr_i arg_st_w;
static bool trans_st_w(DisasContext *ctx, arg_st_w *a);
typedef arg_rr_i arg_st_d;
static bool trans_st_d(DisasContext *ctx, arg_st_d *a);
typedef arg_rr_i arg_ld_bu;
static bool trans_ld_bu(DisasContext *ctx, arg_ld_bu *a);
typedef arg_rr_i arg_ld_hu;
static bool trans_ld_hu(DisasContext *ctx, arg_ld_hu *a);
typedef arg_rr_i arg_ld_wu;
static bool trans_ld_wu(DisasContext *ctx, arg_ld_wu *a);
typedef arg_rrr arg_ldx_b;
static bool trans_ldx_b(DisasContext *ctx, arg_ldx_b *a);
typedef arg_rrr arg_ldx_h;
static bool trans_ldx_h(DisasContext *ctx, arg_ldx_h *a);
typedef arg_rrr arg_ldx_w;
static bool trans_ldx_w(DisasContext *ctx, arg_ldx_w *a);
typedef arg_rrr arg_ldx_d;
static bool trans_ldx_d(DisasContext *ctx, arg_ldx_d *a);
typedef arg_rrr arg_stx_b;
static bool trans_stx_b(DisasContext *ctx, arg_stx_b *a);
typedef arg_rrr arg_stx_h;
static bool trans_stx_h(DisasContext *ctx, arg_stx_h *a);
typedef arg_rrr arg_stx_w;
static bool trans_stx_w(DisasContext *ctx, arg_stx_w *a);
typedef arg_rrr arg_stx_d;
static bool trans_stx_d(DisasContext *ctx, arg_stx_d *a);
typedef arg_rrr arg_ldx_bu;
static bool trans_ldx_bu(DisasContext *ctx, arg_ldx_bu *a);
typedef arg_rrr arg_ldx_hu;
static bool trans_ldx_hu(DisasContext *ctx, arg_ldx_hu *a);
typedef arg_rrr arg_ldx_wu;
static bool trans_ldx_wu(DisasContext *ctx, arg_ldx_wu *a);
typedef arg_hint_r_i arg_preld;
static bool trans_preld(DisasContext *ctx, arg_preld *a);
typedef arg_i arg_dbar;
static bool trans_dbar(DisasContext *ctx, arg_dbar *a);
typedef arg_i arg_ibar;
static bool trans_ibar(DisasContext *ctx, arg_ibar *a);
typedef arg_rr_i arg_ldptr_w;
static bool trans_ldptr_w(DisasContext *ctx, arg_ldptr_w *a);
typedef arg_rr_i arg_stptr_w;
static bool trans_stptr_w(DisasContext *ctx, arg_stptr_w *a);
typedef arg_rr_i arg_ldptr_d;
static bool trans_ldptr_d(DisasContext *ctx, arg_ldptr_d *a);
typedef arg_rr_i arg_stptr_d;
static bool trans_stptr_d(DisasContext *ctx, arg_stptr_d *a);
typedef arg_rrr arg_ldgt_b;
static bool trans_ldgt_b(DisasContext *ctx, arg_ldgt_b *a);
typedef arg_rrr arg_ldgt_h;
static bool trans_ldgt_h(DisasContext *ctx, arg_ldgt_h *a);
typedef arg_rrr arg_ldgt_w;
static bool trans_ldgt_w(DisasContext *ctx, arg_ldgt_w *a);
typedef arg_rrr arg_ldgt_d;
static bool trans_ldgt_d(DisasContext *ctx, arg_ldgt_d *a);
typedef arg_rrr arg_ldle_b;
static bool trans_ldle_b(DisasContext *ctx, arg_ldle_b *a);
typedef arg_rrr arg_ldle_h;
static bool trans_ldle_h(DisasContext *ctx, arg_ldle_h *a);
typedef arg_rrr arg_ldle_w;
static bool trans_ldle_w(DisasContext *ctx, arg_ldle_w *a);
typedef arg_rrr arg_ldle_d;
static bool trans_ldle_d(DisasContext *ctx, arg_ldle_d *a);
typedef arg_rrr arg_stgt_b;
static bool trans_stgt_b(DisasContext *ctx, arg_stgt_b *a);
typedef arg_rrr arg_stgt_h;
static bool trans_stgt_h(DisasContext *ctx, arg_stgt_h *a);
typedef arg_rrr arg_stgt_w;
static bool trans_stgt_w(DisasContext *ctx, arg_stgt_w *a);
typedef arg_rrr arg_stgt_d;
static bool trans_stgt_d(DisasContext *ctx, arg_stgt_d *a);
typedef arg_rrr arg_stle_b;
static bool trans_stle_b(DisasContext *ctx, arg_stle_b *a);
typedef arg_rrr arg_stle_h;
static bool trans_stle_h(DisasContext *ctx, arg_stle_h *a);
typedef arg_rrr arg_stle_w;
static bool trans_stle_w(DisasContext *ctx, arg_stle_w *a);
typedef arg_rrr arg_stle_d;
static bool trans_stle_d(DisasContext *ctx, arg_stle_d *a);
typedef arg_rr_i arg_ll_w;
static bool trans_ll_w(DisasContext *ctx, arg_ll_w *a);
typedef arg_rr_i arg_sc_w;
static bool trans_sc_w(DisasContext *ctx, arg_sc_w *a);
typedef arg_rr_i arg_ll_d;
static bool trans_ll_d(DisasContext *ctx, arg_ll_d *a);
typedef arg_rr_i arg_sc_d;
static bool trans_sc_d(DisasContext *ctx, arg_sc_d *a);
typedef arg_rrr arg_amswap_w;
static bool trans_amswap_w(DisasContext *ctx, arg_amswap_w *a);
typedef arg_rrr arg_amswap_d;
static bool trans_amswap_d(DisasContext *ctx, arg_amswap_d *a);
typedef arg_rrr arg_amadd_w;
static bool trans_amadd_w(DisasContext *ctx, arg_amadd_w *a);
typedef arg_rrr arg_amadd_d;
static bool trans_amadd_d(DisasContext *ctx, arg_amadd_d *a);
typedef arg_rrr arg_amand_w;
static bool trans_amand_w(DisasContext *ctx, arg_amand_w *a);
typedef arg_rrr arg_amand_d;
static bool trans_amand_d(DisasContext *ctx, arg_amand_d *a);
typedef arg_rrr arg_amor_w;
static bool trans_amor_w(DisasContext *ctx, arg_amor_w *a);
typedef arg_rrr arg_amor_d;
static bool trans_amor_d(DisasContext *ctx, arg_amor_d *a);
typedef arg_rrr arg_amxor_w;
static bool trans_amxor_w(DisasContext *ctx, arg_amxor_w *a);
typedef arg_rrr arg_amxor_d;
static bool trans_amxor_d(DisasContext *ctx, arg_amxor_d *a);
typedef arg_rrr arg_ammax_w;
static bool trans_ammax_w(DisasContext *ctx, arg_ammax_w *a);
typedef arg_rrr arg_ammax_d;
static bool trans_ammax_d(DisasContext *ctx, arg_ammax_d *a);
typedef arg_rrr arg_ammin_w;
static bool trans_ammin_w(DisasContext *ctx, arg_ammin_w *a);
typedef arg_rrr arg_ammin_d;
static bool trans_ammin_d(DisasContext *ctx, arg_ammin_d *a);
typedef arg_rrr arg_ammax_wu;
static bool trans_ammax_wu(DisasContext *ctx, arg_ammax_wu *a);
typedef arg_rrr arg_ammax_du;
static bool trans_ammax_du(DisasContext *ctx, arg_ammax_du *a);
typedef arg_rrr arg_ammin_wu;
static bool trans_ammin_wu(DisasContext *ctx, arg_ammin_wu *a);
typedef arg_rrr arg_ammin_du;
static bool trans_ammin_du(DisasContext *ctx, arg_ammin_du *a);
typedef arg_rrr arg_amswap_db_w;
static bool trans_amswap_db_w(DisasContext *ctx, arg_amswap_db_w *a);
typedef arg_rrr arg_amswap_db_d;
static bool trans_amswap_db_d(DisasContext *ctx, arg_amswap_db_d *a);
typedef arg_rrr arg_amadd_db_w;
static bool trans_amadd_db_w(DisasContext *ctx, arg_amadd_db_w *a);
typedef arg_rrr arg_amadd_db_d;
static bool trans_amadd_db_d(DisasContext *ctx, arg_amadd_db_d *a);
typedef arg_rrr arg_amand_db_w;
static bool trans_amand_db_w(DisasContext *ctx, arg_amand_db_w *a);
typedef arg_rrr arg_amand_db_d;
static bool trans_amand_db_d(DisasContext *ctx, arg_amand_db_d *a);
typedef arg_rrr arg_amor_db_w;
static bool trans_amor_db_w(DisasContext *ctx, arg_amor_db_w *a);
typedef arg_rrr arg_amor_db_d;
static bool trans_amor_db_d(DisasContext *ctx, arg_amor_db_d *a);
typedef arg_rrr arg_amxor_db_w;
static bool trans_amxor_db_w(DisasContext *ctx, arg_amxor_db_w *a);
typedef arg_rrr arg_amxor_db_d;
static bool trans_amxor_db_d(DisasContext *ctx, arg_amxor_db_d *a);
typedef arg_rrr arg_ammax_db_w;
static bool trans_ammax_db_w(DisasContext *ctx, arg_ammax_db_w *a);
typedef arg_rrr arg_ammax_db_d;
static bool trans_ammax_db_d(DisasContext *ctx, arg_ammax_db_d *a);
typedef arg_rrr arg_ammin_db_w;
static bool trans_ammin_db_w(DisasContext *ctx, arg_ammin_db_w *a);
typedef arg_rrr arg_ammin_db_d;
static bool trans_ammin_db_d(DisasContext *ctx, arg_ammin_db_d *a);
typedef arg_rrr arg_ammax_db_wu;
static bool trans_ammax_db_wu(DisasContext *ctx, arg_ammax_db_wu *a);
typedef arg_rrr arg_ammax_db_du;
static bool trans_ammax_db_du(DisasContext *ctx, arg_ammax_db_du *a);
typedef arg_rrr arg_ammin_db_wu;
static bool trans_ammin_db_wu(DisasContext *ctx, arg_ammin_db_wu *a);
typedef arg_rrr arg_ammin_db_du;
static bool trans_ammin_db_du(DisasContext *ctx, arg_ammin_db_du *a);
typedef arg_rrr arg_crc_w_b_w;
static bool trans_crc_w_b_w(DisasContext *ctx, arg_crc_w_b_w *a);
typedef arg_rrr arg_crc_w_h_w;
static bool trans_crc_w_h_w(DisasContext *ctx, arg_crc_w_h_w *a);
typedef arg_rrr arg_crc_w_w_w;
static bool trans_crc_w_w_w(DisasContext *ctx, arg_crc_w_w_w *a);
typedef arg_rrr arg_crc_w_d_w;
static bool trans_crc_w_d_w(DisasContext *ctx, arg_crc_w_d_w *a);
typedef arg_rrr arg_crcc_w_b_w;
static bool trans_crcc_w_b_w(DisasContext *ctx, arg_crcc_w_b_w *a);
typedef arg_rrr arg_crcc_w_h_w;
static bool trans_crcc_w_h_w(DisasContext *ctx, arg_crcc_w_h_w *a);
typedef arg_rrr arg_crcc_w_w_w;
static bool trans_crcc_w_w_w(DisasContext *ctx, arg_crcc_w_w_w *a);
typedef arg_rrr arg_crcc_w_d_w;
static bool trans_crcc_w_d_w(DisasContext *ctx, arg_crcc_w_d_w *a);
typedef arg_i arg_break;
static bool trans_break(DisasContext *ctx, arg_break *a);
typedef arg_i arg_syscall;
static bool trans_syscall(DisasContext *ctx, arg_syscall *a);
typedef arg_rr_jk arg_asrtle_d;
static bool trans_asrtle_d(DisasContext *ctx, arg_asrtle_d *a);
typedef arg_rr_jk arg_asrtgt_d;
static bool trans_asrtgt_d(DisasContext *ctx, arg_asrtgt_d *a);
typedef arg_rr arg_rdtimel_w;
static bool trans_rdtimel_w(DisasContext *ctx, arg_rdtimel_w *a);
typedef arg_rr arg_rdtimeh_w;
static bool trans_rdtimeh_w(DisasContext *ctx, arg_rdtimeh_w *a);
typedef arg_rr arg_rdtime_d;
static bool trans_rdtime_d(DisasContext *ctx, arg_rdtime_d *a);
typedef arg_rr arg_cpucfg;
static bool trans_cpucfg(DisasContext *ctx, arg_cpucfg *a);
typedef arg_fff arg_fadd_s;
static bool trans_fadd_s(DisasContext *ctx, arg_fadd_s *a);
typedef arg_fff arg_fadd_d;
static bool trans_fadd_d(DisasContext *ctx, arg_fadd_d *a);
typedef arg_fff arg_fsub_s;
static bool trans_fsub_s(DisasContext *ctx, arg_fsub_s *a);
typedef arg_fff arg_fsub_d;
static bool trans_fsub_d(DisasContext *ctx, arg_fsub_d *a);
typedef arg_fff arg_fmul_s;
static bool trans_fmul_s(DisasContext *ctx, arg_fmul_s *a);
typedef arg_fff arg_fmul_d;
static bool trans_fmul_d(DisasContext *ctx, arg_fmul_d *a);
typedef arg_fff arg_fdiv_s;
static bool trans_fdiv_s(DisasContext *ctx, arg_fdiv_s *a);
typedef arg_fff arg_fdiv_d;
static bool trans_fdiv_d(DisasContext *ctx, arg_fdiv_d *a);
typedef arg_ffff arg_fmadd_s;
static bool trans_fmadd_s(DisasContext *ctx, arg_fmadd_s *a);
typedef arg_ffff arg_fmadd_d;
static bool trans_fmadd_d(DisasContext *ctx, arg_fmadd_d *a);
typedef arg_ffff arg_fmsub_s;
static bool trans_fmsub_s(DisasContext *ctx, arg_fmsub_s *a);
typedef arg_ffff arg_fmsub_d;
static bool trans_fmsub_d(DisasContext *ctx, arg_fmsub_d *a);
typedef arg_ffff arg_fnmadd_s;
static bool trans_fnmadd_s(DisasContext *ctx, arg_fnmadd_s *a);
typedef arg_ffff arg_fnmadd_d;
static bool trans_fnmadd_d(DisasContext *ctx, arg_fnmadd_d *a);
typedef arg_ffff arg_fnmsub_s;
static bool trans_fnmsub_s(DisasContext *ctx, arg_fnmsub_s *a);
typedef arg_ffff arg_fnmsub_d;
static bool trans_fnmsub_d(DisasContext *ctx, arg_fnmsub_d *a);
typedef arg_fff arg_fmax_s;
static bool trans_fmax_s(DisasContext *ctx, arg_fmax_s *a);
typedef arg_fff arg_fmax_d;
static bool trans_fmax_d(DisasContext *ctx, arg_fmax_d *a);
typedef arg_fff arg_fmin_s;
static bool trans_fmin_s(DisasContext *ctx, arg_fmin_s *a);
typedef arg_fff arg_fmin_d;
static bool trans_fmin_d(DisasContext *ctx, arg_fmin_d *a);
typedef arg_fff arg_fmaxa_s;
static bool trans_fmaxa_s(DisasContext *ctx, arg_fmaxa_s *a);
typedef arg_fff arg_fmaxa_d;
static bool trans_fmaxa_d(DisasContext *ctx, arg_fmaxa_d *a);
typedef arg_fff arg_fmina_s;
static bool trans_fmina_s(DisasContext *ctx, arg_fmina_s *a);
typedef arg_fff arg_fmina_d;
static bool trans_fmina_d(DisasContext *ctx, arg_fmina_d *a);
typedef arg_ff arg_fabs_s;
static bool trans_fabs_s(DisasContext *ctx, arg_fabs_s *a);
typedef arg_ff arg_fabs_d;
static bool trans_fabs_d(DisasContext *ctx, arg_fabs_d *a);
typedef arg_ff arg_fneg_s;
static bool trans_fneg_s(DisasContext *ctx, arg_fneg_s *a);
typedef arg_ff arg_fneg_d;
static bool trans_fneg_d(DisasContext *ctx, arg_fneg_d *a);
typedef arg_ff arg_fsqrt_s;
static bool trans_fsqrt_s(DisasContext *ctx, arg_fsqrt_s *a);
typedef arg_ff arg_fsqrt_d;
static bool trans_fsqrt_d(DisasContext *ctx, arg_fsqrt_d *a);
typedef arg_ff arg_frecip_s;
static bool trans_frecip_s(DisasContext *ctx, arg_frecip_s *a);
typedef arg_ff arg_frecip_d;
static bool trans_frecip_d(DisasContext *ctx, arg_frecip_d *a);
typedef arg_ff arg_frsqrt_s;
static bool trans_frsqrt_s(DisasContext *ctx, arg_frsqrt_s *a);
typedef arg_ff arg_frsqrt_d;
static bool trans_frsqrt_d(DisasContext *ctx, arg_frsqrt_d *a);
typedef arg_fff arg_fscaleb_s;
static bool trans_fscaleb_s(DisasContext *ctx, arg_fscaleb_s *a);
typedef arg_fff arg_fscaleb_d;
static bool trans_fscaleb_d(DisasContext *ctx, arg_fscaleb_d *a);
typedef arg_ff arg_flogb_s;
static bool trans_flogb_s(DisasContext *ctx, arg_flogb_s *a);
typedef arg_ff arg_flogb_d;
static bool trans_flogb_d(DisasContext *ctx, arg_flogb_d *a);
typedef arg_fff arg_fcopysign_s;
static bool trans_fcopysign_s(DisasContext *ctx, arg_fcopysign_s *a);
typedef arg_fff arg_fcopysign_d;
static bool trans_fcopysign_d(DisasContext *ctx, arg_fcopysign_d *a);
typedef arg_ff arg_fclass_s;
static bool trans_fclass_s(DisasContext *ctx, arg_fclass_s *a);
typedef arg_ff arg_fclass_d;
static bool trans_fclass_d(DisasContext *ctx, arg_fclass_d *a);
typedef arg_cff_fcond arg_fcmp_cond_s;
static bool trans_fcmp_cond_s(DisasContext *ctx, arg_fcmp_cond_s *a);
typedef arg_cff_fcond arg_fcmp_cond_d;
static bool trans_fcmp_cond_d(DisasContext *ctx, arg_fcmp_cond_d *a);
typedef arg_ff arg_fcvt_s_d;
static bool trans_fcvt_s_d(DisasContext *ctx, arg_fcvt_s_d *a);
typedef arg_ff arg_fcvt_d_s;
static bool trans_fcvt_d_s(DisasContext *ctx, arg_fcvt_d_s *a);
typedef arg_ff arg_ftintrm_w_s;
static bool trans_ftintrm_w_s(DisasContext *ctx, arg_ftintrm_w_s *a);
typedef arg_ff arg_ftintrm_w_d;
static bool trans_ftintrm_w_d(DisasContext *ctx, arg_ftintrm_w_d *a);
typedef arg_ff arg_ftintrm_l_s;
static bool trans_ftintrm_l_s(DisasContext *ctx, arg_ftintrm_l_s *a);
typedef arg_ff arg_ftintrm_l_d;
static bool trans_ftintrm_l_d(DisasContext *ctx, arg_ftintrm_l_d *a);
typedef arg_ff arg_ftintrp_w_s;
static bool trans_ftintrp_w_s(DisasContext *ctx, arg_ftintrp_w_s *a);
typedef arg_ff arg_ftintrp_w_d;
static bool trans_ftintrp_w_d(DisasContext *ctx, arg_ftintrp_w_d *a);
typedef arg_ff arg_ftintrp_l_s;
static bool trans_ftintrp_l_s(DisasContext *ctx, arg_ftintrp_l_s *a);
typedef arg_ff arg_ftintrp_l_d;
static bool trans_ftintrp_l_d(DisasContext *ctx, arg_ftintrp_l_d *a);
typedef arg_ff arg_ftintrz_w_s;
static bool trans_ftintrz_w_s(DisasContext *ctx, arg_ftintrz_w_s *a);
typedef arg_ff arg_ftintrz_w_d;
static bool trans_ftintrz_w_d(DisasContext *ctx, arg_ftintrz_w_d *a);
typedef arg_ff arg_ftintrz_l_s;
static bool trans_ftintrz_l_s(DisasContext *ctx, arg_ftintrz_l_s *a);
typedef arg_ff arg_ftintrz_l_d;
static bool trans_ftintrz_l_d(DisasContext *ctx, arg_ftintrz_l_d *a);
typedef arg_ff arg_ftintrne_w_s;
static bool trans_ftintrne_w_s(DisasContext *ctx, arg_ftintrne_w_s *a);
typedef arg_ff arg_ftintrne_w_d;
static bool trans_ftintrne_w_d(DisasContext *ctx, arg_ftintrne_w_d *a);
typedef arg_ff arg_ftintrne_l_s;
static bool trans_ftintrne_l_s(DisasContext *ctx, arg_ftintrne_l_s *a);
typedef arg_ff arg_ftintrne_l_d;
static bool trans_ftintrne_l_d(DisasContext *ctx, arg_ftintrne_l_d *a);
typedef arg_ff arg_ftint_w_s;
static bool trans_ftint_w_s(DisasContext *ctx, arg_ftint_w_s *a);
typedef arg_ff arg_ftint_w_d;
static bool trans_ftint_w_d(DisasContext *ctx, arg_ftint_w_d *a);
typedef arg_ff arg_ftint_l_s;
static bool trans_ftint_l_s(DisasContext *ctx, arg_ftint_l_s *a);
typedef arg_ff arg_ftint_l_d;
static bool trans_ftint_l_d(DisasContext *ctx, arg_ftint_l_d *a);
typedef arg_ff arg_ffint_s_w;
static bool trans_ffint_s_w(DisasContext *ctx, arg_ffint_s_w *a);
typedef arg_ff arg_ffint_s_l;
static bool trans_ffint_s_l(DisasContext *ctx, arg_ffint_s_l *a);
typedef arg_ff arg_ffint_d_w;
static bool trans_ffint_d_w(DisasContext *ctx, arg_ffint_d_w *a);
typedef arg_ff arg_ffint_d_l;
static bool trans_ffint_d_l(DisasContext *ctx, arg_ffint_d_l *a);
typedef arg_ff arg_frint_s;
static bool trans_frint_s(DisasContext *ctx, arg_frint_s *a);
typedef arg_ff arg_frint_d;
static bool trans_frint_d(DisasContext *ctx, arg_frint_d *a);
typedef arg_ff arg_fmov_s;
static bool trans_fmov_s(DisasContext *ctx, arg_fmov_s *a);
typedef arg_ff arg_fmov_d;
static bool trans_fmov_d(DisasContext *ctx, arg_fmov_d *a);
typedef arg_fffc arg_fsel;
static bool trans_fsel(DisasContext *ctx, arg_fsel *a);
typedef arg_fr arg_movgr2fr_w;
static bool trans_movgr2fr_w(DisasContext *ctx, arg_movgr2fr_w *a);
typedef arg_fr arg_movgr2fr_d;
static bool trans_movgr2fr_d(DisasContext *ctx, arg_movgr2fr_d *a);
typedef arg_fr arg_movgr2frh_w;
static bool trans_movgr2frh_w(DisasContext *ctx, arg_movgr2frh_w *a);
typedef arg_rf arg_movfr2gr_s;
static bool trans_movfr2gr_s(DisasContext *ctx, arg_movfr2gr_s *a);
typedef arg_rf arg_movfr2gr_d;
static bool trans_movfr2gr_d(DisasContext *ctx, arg_movfr2gr_d *a);
typedef arg_rf arg_movfrh2gr_s;
static bool trans_movfrh2gr_s(DisasContext *ctx, arg_movfrh2gr_s *a);
typedef arg_fcsrd_r arg_movgr2fcsr;
static bool trans_movgr2fcsr(DisasContext *ctx, arg_movgr2fcsr *a);
typedef arg_r_fcsrs arg_movfcsr2gr;
static bool trans_movfcsr2gr(DisasContext *ctx, arg_movfcsr2gr *a);
typedef arg_cf arg_movfr2cf;
static bool trans_movfr2cf(DisasContext *ctx, arg_movfr2cf *a);
typedef arg_fc arg_movcf2fr;
static bool trans_movcf2fr(DisasContext *ctx, arg_movcf2fr *a);
typedef arg_cr arg_movgr2cf;
static bool trans_movgr2cf(DisasContext *ctx, arg_movgr2cf *a);
typedef arg_rc arg_movcf2gr;
static bool trans_movcf2gr(DisasContext *ctx, arg_movcf2gr *a);
typedef arg_fr_i arg_fld_s;
static bool trans_fld_s(DisasContext *ctx, arg_fld_s *a);
typedef arg_fr_i arg_fst_s;
static bool trans_fst_s(DisasContext *ctx, arg_fst_s *a);
typedef arg_fr_i arg_fld_d;
static bool trans_fld_d(DisasContext *ctx, arg_fld_d *a);
typedef arg_fr_i arg_fst_d;
static bool trans_fst_d(DisasContext *ctx, arg_fst_d *a);
typedef arg_frr arg_fldx_s;
static bool trans_fldx_s(DisasContext *ctx, arg_fldx_s *a);
typedef arg_frr arg_fldx_d;
static bool trans_fldx_d(DisasContext *ctx, arg_fldx_d *a);
typedef arg_frr arg_fstx_s;
static bool trans_fstx_s(DisasContext *ctx, arg_fstx_s *a);
typedef arg_frr arg_fstx_d;
static bool trans_fstx_d(DisasContext *ctx, arg_fstx_d *a);
typedef arg_frr arg_fldgt_s;
static bool trans_fldgt_s(DisasContext *ctx, arg_fldgt_s *a);
typedef arg_frr arg_fldgt_d;
static bool trans_fldgt_d(DisasContext *ctx, arg_fldgt_d *a);
typedef arg_frr arg_fldle_s;
static bool trans_fldle_s(DisasContext *ctx, arg_fldle_s *a);
typedef arg_frr arg_fldle_d;
static bool trans_fldle_d(DisasContext *ctx, arg_fldle_d *a);
typedef arg_frr arg_fstgt_s;
static bool trans_fstgt_s(DisasContext *ctx, arg_fstgt_s *a);
typedef arg_frr arg_fstgt_d;
static bool trans_fstgt_d(DisasContext *ctx, arg_fstgt_d *a);
typedef arg_frr arg_fstle_s;
static bool trans_fstle_s(DisasContext *ctx, arg_fstle_s *a);
typedef arg_frr arg_fstle_d;
static bool trans_fstle_d(DisasContext *ctx, arg_fstle_d *a);
typedef arg_r_offs arg_beqz;
static bool trans_beqz(DisasContext *ctx, arg_beqz *a);
typedef arg_r_offs arg_bnez;
static bool trans_bnez(DisasContext *ctx, arg_bnez *a);
typedef arg_c_offs arg_bceqz;
static bool trans_bceqz(DisasContext *ctx, arg_bceqz *a);
typedef arg_c_offs arg_bcnez;
static bool trans_bcnez(DisasContext *ctx, arg_bcnez *a);
typedef arg_rr_offs arg_jirl;
static bool trans_jirl(DisasContext *ctx, arg_jirl *a);
typedef arg_offs arg_b;
static bool trans_b(DisasContext *ctx, arg_b *a);
typedef arg_offs arg_bl;
static bool trans_bl(DisasContext *ctx, arg_bl *a);
typedef arg_rr_offs arg_beq;
static bool trans_beq(DisasContext *ctx, arg_beq *a);
typedef arg_rr_offs arg_bne;
static bool trans_bne(DisasContext *ctx, arg_bne *a);
typedef arg_rr_offs arg_blt;
static bool trans_blt(DisasContext *ctx, arg_blt *a);
typedef arg_rr_offs arg_bge;
static bool trans_bge(DisasContext *ctx, arg_bge *a);
typedef arg_rr_offs arg_bltu;
static bool trans_bltu(DisasContext *ctx, arg_bltu *a);
typedef arg_rr_offs arg_bgeu;
static bool trans_bgeu(DisasContext *ctx, arg_bgeu *a);
typedef arg_r_csr arg_csrrd;
static bool trans_csrrd(DisasContext *ctx, arg_csrrd *a);
typedef arg_r_csr arg_csrwr;
static bool trans_csrwr(DisasContext *ctx, arg_csrwr *a);
typedef arg_rr_csr arg_csrxchg;
static bool trans_csrxchg(DisasContext *ctx, arg_csrxchg *a);
typedef arg_rr arg_iocsrrd_b;
static bool trans_iocsrrd_b(DisasContext *ctx, arg_iocsrrd_b *a);
typedef arg_rr arg_iocsrrd_h;
static bool trans_iocsrrd_h(DisasContext *ctx, arg_iocsrrd_h *a);
typedef arg_rr arg_iocsrrd_w;
static bool trans_iocsrrd_w(DisasContext *ctx, arg_iocsrrd_w *a);
typedef arg_rr arg_iocsrrd_d;
static bool trans_iocsrrd_d(DisasContext *ctx, arg_iocsrrd_d *a);
typedef arg_rr arg_iocsrwr_b;
static bool trans_iocsrwr_b(DisasContext *ctx, arg_iocsrwr_b *a);
typedef arg_rr arg_iocsrwr_h;
static bool trans_iocsrwr_h(DisasContext *ctx, arg_iocsrwr_h *a);
typedef arg_rr arg_iocsrwr_w;
static bool trans_iocsrwr_w(DisasContext *ctx, arg_iocsrwr_w *a);
typedef arg_rr arg_iocsrwr_d;
static bool trans_iocsrwr_d(DisasContext *ctx, arg_iocsrwr_d *a);
typedef arg_empty arg_tlbsrch;
static bool trans_tlbsrch(DisasContext *ctx, arg_tlbsrch *a);
typedef arg_empty arg_tlbrd;
static bool trans_tlbrd(DisasContext *ctx, arg_tlbrd *a);
typedef arg_empty arg_tlbwr;
static bool trans_tlbwr(DisasContext *ctx, arg_tlbwr *a);
typedef arg_empty arg_tlbfill;
static bool trans_tlbfill(DisasContext *ctx, arg_tlbfill *a);
typedef arg_empty arg_tlbclr;
static bool trans_tlbclr(DisasContext *ctx, arg_tlbclr *a);
typedef arg_empty arg_tlbflush;
static bool trans_tlbflush(DisasContext *ctx, arg_tlbflush *a);
typedef arg_i_rr arg_invtlb;
static bool trans_invtlb(DisasContext *ctx, arg_invtlb *a);
typedef arg_cop_r_i arg_cacop;
static bool trans_cacop(DisasContext *ctx, arg_cacop *a);
typedef arg_rr_i arg_lddir;
static bool trans_lddir(DisasContext *ctx, arg_lddir *a);
typedef arg_j_i arg_ldpte;
static bool trans_ldpte(DisasContext *ctx, arg_ldpte *a);
typedef arg_empty arg_ertn;
static bool trans_ertn(DisasContext *ctx, arg_ertn *a);
typedef arg_i arg_idle;
static bool trans_idle(DisasContext *ctx, arg_idle *a);
typedef arg_i arg_dbcl;
static bool trans_dbcl(DisasContext *ctx, arg_dbcl *a);

static void decode_extract_c_offs21(DisasContext *ctx, arg_c_offs *a, uint32_t insn)
{
    a->cj = extract32(insn, 5, 3);
    a->offs = shl_2(ctx, deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 5)));
}

static void decode_extract_cf(DisasContext *ctx, arg_cf *a, uint32_t insn)
{
    a->fj = extract32(insn, 5, 5);
    a->cd = extract32(insn, 0, 3);
}

static void decode_extract_cff_fcond(DisasContext *ctx, arg_cff_fcond *a, uint32_t insn)
{
    a->fcond = extract32(insn, 15, 5);
    a->fk = extract32(insn, 10, 5);
    a->fj = extract32(insn, 5, 5);
    a->cd = extract32(insn, 0, 3);
}

static void decode_extract_cop_r_i(DisasContext *ctx, arg_cop_r_i *a, uint32_t insn)
{
    a->imm = sextract32(insn, 10, 12);
    a->rj = extract32(insn, 5, 5);
    a->cop = extract32(insn, 0, 5);
}

static void decode_extract_cr(DisasContext *ctx, arg_cr *a, uint32_t insn)
{
    a->rj = extract32(insn, 5, 5);
    a->cd = extract32(insn, 0, 3);
}

static void decode_extract_empty(DisasContext *ctx, arg_empty *a, uint32_t insn)
{
}

static void decode_extract_fc(DisasContext *ctx, arg_fc *a, uint32_t insn)
{
    a->cj = extract32(insn, 5, 3);
    a->fd = extract32(insn, 0, 5);
}

static void decode_extract_fcsrd_r(DisasContext *ctx, arg_fcsrd_r *a, uint32_t insn)
{
    a->rj = extract32(insn, 5, 5);
    a->fcsrd = extract32(insn, 0, 5);
}

static void decode_extract_ff(DisasContext *ctx, arg_ff *a, uint32_t insn)
{
    a->fj = extract32(insn, 5, 5);
    a->fd = extract32(insn, 0, 5);
}

static void decode_extract_fff(DisasContext *ctx, arg_fff *a, uint32_t insn)
{
    a->fk = extract32(insn, 10, 5);
    a->fj = extract32(insn, 5, 5);
    a->fd = extract32(insn, 0, 5);
}

static void decode_extract_fffc(DisasContext *ctx, arg_fffc *a, uint32_t insn)
{
    a->ca = extract32(insn, 15, 3);
    a->fk = extract32(insn, 10, 5);
    a->fj = extract32(insn, 5, 5);
    a->fd = extract32(insn, 0, 5);
}

static void decode_extract_ffff(DisasContext *ctx, arg_ffff *a, uint32_t insn)
{
    a->fa = extract32(insn, 15, 5);
    a->fk = extract32(insn, 10, 5);
    a->fj = extract32(insn, 5, 5);
    a->fd = extract32(insn, 0, 5);
}

static void decode_extract_fr(DisasContext *ctx, arg_fr *a, uint32_t insn)
{
    a->rj = extract32(insn, 5, 5);
    a->fd = extract32(insn, 0, 5);
}

static void decode_extract_fr_i12(DisasContext *ctx, arg_fr_i *a, uint32_t insn)
{
    a->imm = sextract32(insn, 10, 12);
    a->rj = extract32(insn, 5, 5);
    a->fd = extract32(insn, 0, 5);
}

static void decode_extract_frr(DisasContext *ctx, arg_frr *a, uint32_t insn)
{
    a->rk = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
    a->fd = extract32(insn, 0, 5);
}

static void decode_extract_hint_r_i12(DisasContext *ctx, arg_hint_r_i *a, uint32_t insn)
{
    a->imm = sextract32(insn, 10, 12);
    a->rj = extract32(insn, 5, 5);
    a->hint = extract32(insn, 0, 5);
}

static void decode_extract_i15(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 0, 15);
}

static void decode_extract_i_rr(DisasContext *ctx, arg_i_rr *a, uint32_t insn)
{
    a->rk = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
    a->imm = extract32(insn, 0, 5);
}

static void decode_extract_j_i(DisasContext *ctx, arg_j_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 10, 8);
    a->rj = extract32(insn, 5, 5);
}

static void decode_extract_offs26(DisasContext *ctx, arg_offs *a, uint32_t insn)
{
    a->offs = shl_2(ctx, deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 10)));
}

static void decode_extract_r_csr(DisasContext *ctx, arg_r_csr *a, uint32_t insn)
{
    a->csr = extract32(insn, 10, 14);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_r_fcsrs(DisasContext *ctx, arg_r_fcsrs *a, uint32_t insn)
{
    a->fcsrs = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_r_i20(DisasContext *ctx, arg_r_i *a, uint32_t insn)
{
    a->imm = sextract32(insn, 5, 20);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_r_offs21(DisasContext *ctx, arg_r_offs *a, uint32_t insn)
{
    a->rj = extract32(insn, 5, 5);
    a->offs = shl_2(ctx, deposit32(extract32(insn, 10, 16), 16, 16, sextract32(insn, 0, 5)));
}

static void decode_extract_rc(DisasContext *ctx, arg_rc *a, uint32_t insn)
{
    a->cj = extract32(insn, 5, 3);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rf(DisasContext *ctx, arg_rf *a, uint32_t insn)
{
    a->fj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr(DisasContext *ctx, arg_rr *a, uint32_t insn)
{
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_2bd(DisasContext *ctx, arg_rr_ms_ls *a, uint32_t insn)
{
    a->ms = extract32(insn, 16, 6);
    a->ls = extract32(insn, 10, 6);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_2bw(DisasContext *ctx, arg_rr_ms_ls *a, uint32_t insn)
{
    a->ms = extract32(insn, 16, 5);
    a->ls = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_csr(DisasContext *ctx, arg_rr_csr *a, uint32_t insn)
{
    a->csr = extract32(insn, 10, 14);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_i12(DisasContext *ctx, arg_rr_i *a, uint32_t insn)
{
    a->imm = sextract32(insn, 10, 12);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_i14s2(DisasContext *ctx, arg_rr_i *a, uint32_t insn)
{
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
    a->imm = shl_2(ctx, sextract32(insn, 10, 14));
}

static void decode_extract_rr_i16(DisasContext *ctx, arg_rr_i *a, uint32_t insn)
{
    a->imm = sextract32(insn, 10, 16);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_jk(DisasContext *ctx, arg_rr_jk *a, uint32_t insn)
{
    a->rk = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
}

static void decode_extract_rr_offs16(DisasContext *ctx, arg_rr_offs *a, uint32_t insn)
{
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
    a->offs = shl_2(ctx, sextract32(insn, 10, 16));
}

static void decode_extract_rr_ui12(DisasContext *ctx, arg_rr_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 10, 12);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_ui5(DisasContext *ctx, arg_rr_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_ui6(DisasContext *ctx, arg_rr_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 10, 6);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rr_ui8(DisasContext *ctx, arg_rr_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 10, 8);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rrr(DisasContext *ctx, arg_rrr *a, uint32_t insn)
{
    a->rk = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rrr_sa2(DisasContext *ctx, arg_rrr_sa *a, uint32_t insn)
{
    a->sa = extract32(insn, 15, 2);
    a->rk = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static void decode_extract_rrr_sa2p1(DisasContext *ctx, arg_rrr_sa *a, uint32_t insn)
{
    a->rk = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
    a->sa = plus_1(ctx, extract32(insn, 15, 2));
}

static void decode_extract_rrr_sa3(DisasContext *ctx, arg_rrr_sa *a, uint32_t insn)
{
    a->sa = extract32(insn, 15, 3);
    a->rk = extract32(insn, 10, 5);
    a->rj = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
}

static bool decode(DisasContext *ctx, uint32_t insn)
{
    union {
        arg_c_offs f_c_offs;
        arg_cf f_cf;
        arg_cff_fcond f_cff_fcond;
        arg_cop_r_i f_cop_r_i;
        arg_cr f_cr;
        arg_empty f_empty;
        arg_fc f_fc;
        arg_fcsrd_r f_fcsrd_r;
        arg_ff f_ff;
        arg_fff f_fff;
        arg_fffc f_fffc;
        arg_ffff f_ffff;
        arg_fr f_fr;
        arg_fr_i f_fr_i;
        arg_frr f_frr;
        arg_hint_r_i f_hint_r_i;
        arg_i f_i;
        arg_i_rr f_i_rr;
        arg_j_i f_j_i;
        arg_offs f_offs;
        arg_r_csr f_r_csr;
        arg_r_fcsrs f_r_fcsrs;
        arg_r_i f_r_i;
        arg_r_offs f_r_offs;
        arg_rc f_rc;
        arg_rf f_rf;
        arg_rr f_rr;
        arg_rr_csr f_rr_csr;
        arg_rr_i f_rr_i;
        arg_rr_jk f_rr_jk;
        arg_rr_ms_ls f_rr_ms_ls;
        arg_rr_offs f_rr_offs;
        arg_rrr f_rrr;
        arg_rrr_sa f_rrr_sa;
    } u;

    switch ((insn >> 26) & 0x3f) {
    case 0x0:
        /* 000000.. ........ ........ ........ */
        switch ((insn >> 22) & 0xf) {
        case 0x0:
            /* 00000000 00...... ........ ........ */
            switch ((insn >> 18) & 0xf) {
            case 0x0:
                /* 00000000 000000.. ........ ........ */
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00000000 0....... ........ */
                    decode_extract_rr(ctx, &u.f_rr, insn);
                    switch ((insn >> 10) & 0x1f) {
                    case 0x4:
                        /* 00000000 00000000 000100.. ........ */
                        /* insns.decode:177 */
                        if (trans_clo_w(ctx, &u.f_rr)) return true;
                        break;
                    case 0x5:
                        /* 00000000 00000000 000101.. ........ */
                        /* insns.decode:178 */
                        if (trans_clz_w(ctx, &u.f_rr)) return true;
                        break;
                    case 0x6:
                        /* 00000000 00000000 000110.. ........ */
                        /* insns.decode:179 */
                        if (trans_cto_w(ctx, &u.f_rr)) return true;
                        break;
                    case 0x7:
                        /* 00000000 00000000 000111.. ........ */
                        /* insns.decode:180 */
                        if (trans_ctz_w(ctx, &u.f_rr)) return true;
                        break;
                    case 0x8:
                        /* 00000000 00000000 001000.. ........ */
                        /* insns.decode:181 */
                        if (trans_clo_d(ctx, &u.f_rr)) return true;
                        break;
                    case 0x9:
                        /* 00000000 00000000 001001.. ........ */
                        /* insns.decode:182 */
                        if (trans_clz_d(ctx, &u.f_rr)) return true;
                        break;
                    case 0xa:
                        /* 00000000 00000000 001010.. ........ */
                        /* insns.decode:183 */
                        if (trans_cto_d(ctx, &u.f_rr)) return true;
                        break;
                    case 0xb:
                        /* 00000000 00000000 001011.. ........ */
                        /* insns.decode:184 */
                        if (trans_ctz_d(ctx, &u.f_rr)) return true;
                        break;
                    case 0xc:
                        /* 00000000 00000000 001100.. ........ */
                        /* insns.decode:185 */
                        if (trans_revb_2h(ctx, &u.f_rr)) return true;
                        break;
                    case 0xd:
                        /* 00000000 00000000 001101.. ........ */
                        /* insns.decode:186 */
                        if (trans_revb_4h(ctx, &u.f_rr)) return true;
                        break;
                    case 0xe:
                        /* 00000000 00000000 001110.. ........ */
                        /* insns.decode:187 */
                        if (trans_revb_2w(ctx, &u.f_rr)) return true;
                        break;
                    case 0xf:
                        /* 00000000 00000000 001111.. ........ */
                        /* insns.decode:188 */
                        if (trans_revb_d(ctx, &u.f_rr)) return true;
                        break;
                    case 0x10:
                        /* 00000000 00000000 010000.. ........ */
                        /* insns.decode:189 */
                        if (trans_revh_2w(ctx, &u.f_rr)) return true;
                        break;
                    case 0x11:
                        /* 00000000 00000000 010001.. ........ */
                        /* insns.decode:190 */
                        if (trans_revh_d(ctx, &u.f_rr)) return true;
                        break;
                    case 0x12:
                        /* 00000000 00000000 010010.. ........ */
                        /* insns.decode:191 */
                        if (trans_bitrev_4b(ctx, &u.f_rr)) return true;
                        break;
                    case 0x13:
                        /* 00000000 00000000 010011.. ........ */
                        /* insns.decode:192 */
                        if (trans_bitrev_8b(ctx, &u.f_rr)) return true;
                        break;
                    case 0x14:
                        /* 00000000 00000000 010100.. ........ */
                        /* insns.decode:193 */
                        if (trans_bitrev_w(ctx, &u.f_rr)) return true;
                        break;
                    case 0x15:
                        /* 00000000 00000000 010101.. ........ */
                        /* insns.decode:194 */
                        if (trans_bitrev_d(ctx, &u.f_rr)) return true;
                        break;
                    case 0x16:
                        /* 00000000 00000000 010110.. ........ */
                        /* insns.decode:175 */
                        if (trans_ext_w_h(ctx, &u.f_rr)) return true;
                        break;
                    case 0x17:
                        /* 00000000 00000000 010111.. ........ */
                        /* insns.decode:176 */
                        if (trans_ext_w_b(ctx, &u.f_rr)) return true;
                        break;
                    case 0x18:
                        /* 00000000 00000000 011000.. ........ */
                        /* insns.decode:312 */
                        if (trans_rdtimel_w(ctx, &u.f_rr)) return true;
                        break;
                    case 0x19:
                        /* 00000000 00000000 011001.. ........ */
                        /* insns.decode:313 */
                        if (trans_rdtimeh_w(ctx, &u.f_rr)) return true;
                        break;
                    case 0x1a:
                        /* 00000000 00000000 011010.. ........ */
                        /* insns.decode:314 */
                        if (trans_rdtime_d(ctx, &u.f_rr)) return true;
                        break;
                    case 0x1b:
                        /* 00000000 00000000 011011.. ........ */
                        /* insns.decode:315 */
                        if (trans_cpucfg(ctx, &u.f_rr)) return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 00000000 00000001 0....... ........ */
                    decode_extract_rr_jk(ctx, &u.f_rr_jk, insn);
                    switch (insn & 0x0000001f) {
                    case 0x00000000:
                        /* 00000000 00000001 0....... ...00000 */
                        /* insns.decode:310 */
                        if (trans_asrtle_d(ctx, &u.f_rr_jk)) return true;
                        break;
                    }
                    break;
                case 0x3:
                    /* 00000000 00000001 1....... ........ */
                    decode_extract_rr_jk(ctx, &u.f_rr_jk, insn);
                    switch (insn & 0x0000001f) {
                    case 0x00000000:
                        /* 00000000 00000001 1....... ...00000 */
                        /* insns.decode:311 */
                        if (trans_asrtgt_d(ctx, &u.f_rr_jk)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x1:
                /* 00000000 000001.. ........ ........ */
                decode_extract_rrr_sa2p1(ctx, &u.f_rrr_sa, insn);
                switch ((insn >> 17) & 0x1) {
                case 0x0:
                    /* 00000000 0000010. ........ ........ */
                    /* insns.decode:135 */
                    if (trans_alsl_w(ctx, &u.f_rrr_sa)) return true;
                    break;
                case 0x1:
                    /* 00000000 0000011. ........ ........ */
                    /* insns.decode:136 */
                    if (trans_alsl_wu(ctx, &u.f_rrr_sa)) return true;
                    break;
                }
                break;
            case 0x2:
                /* 00000000 000010.. ........ ........ */
                decode_extract_rrr_sa2(ctx, &u.f_rrr_sa, insn);
                switch ((insn >> 17) & 0x1) {
                case 0x0:
                    /* 00000000 0000100. ........ ........ */
                    /* insns.decode:195 */
                    if (trans_bytepick_w(ctx, &u.f_rrr_sa)) return true;
                    break;
                }
                break;
            case 0x3:
                /* 00000000 000011.. ........ ........ */
                /* insns.decode:196 */
                decode_extract_rrr_sa3(ctx, &u.f_rrr_sa, insn);
                if (trans_bytepick_d(ctx, &u.f_rrr_sa)) return true;
                break;
            case 0x4:
                /* 00000000 000100.. ........ ........ */
                decode_extract_rrr(ctx, &u.f_rrr, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00010000 0....... ........ */
                    /* insns.decode:105 */
                    if (trans_add_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x1:
                    /* 00000000 00010000 1....... ........ */
                    /* insns.decode:106 */
                    if (trans_add_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x2:
                    /* 00000000 00010001 0....... ........ */
                    /* insns.decode:107 */
                    if (trans_sub_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x3:
                    /* 00000000 00010001 1....... ........ */
                    /* insns.decode:108 */
                    if (trans_sub_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x4:
                    /* 00000000 00010010 0....... ........ */
                    /* insns.decode:109 */
                    if (trans_slt(ctx, &u.f_rrr)) return true;
                    break;
                case 0x5:
                    /* 00000000 00010010 1....... ........ */
                    /* insns.decode:110 */
                    if (trans_sltu(ctx, &u.f_rrr)) return true;
                    break;
                case 0x6:
                    /* 00000000 00010011 0....... ........ */
                    /* insns.decode:197 */
                    if (trans_maskeqz(ctx, &u.f_rrr)) return true;
                    break;
                case 0x7:
                    /* 00000000 00010011 1....... ........ */
                    /* insns.decode:198 */
                    if (trans_masknez(ctx, &u.f_rrr)) return true;
                    break;
                }
                break;
            case 0x5:
                /* 00000000 000101.. ........ ........ */
                decode_extract_rrr(ctx, &u.f_rrr, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00010100 0....... ........ */
                    /* insns.decode:113 */
                    if (trans_nor(ctx, &u.f_rrr)) return true;
                    break;
                case 0x1:
                    /* 00000000 00010100 1....... ........ */
                    /* insns.decode:114 */
                    if (trans_and(ctx, &u.f_rrr)) return true;
                    break;
                case 0x2:
                    /* 00000000 00010101 0....... ........ */
                    /* insns.decode:115 */
                    if (trans_or(ctx, &u.f_rrr)) return true;
                    break;
                case 0x3:
                    /* 00000000 00010101 1....... ........ */
                    /* insns.decode:116 */
                    if (trans_xor(ctx, &u.f_rrr)) return true;
                    break;
                case 0x4:
                    /* 00000000 00010110 0....... ........ */
                    /* insns.decode:117 */
                    if (trans_orn(ctx, &u.f_rrr)) return true;
                    break;
                case 0x5:
                    /* 00000000 00010110 1....... ........ */
                    /* insns.decode:118 */
                    if (trans_andn(ctx, &u.f_rrr)) return true;
                    break;
                case 0x6:
                    /* 00000000 00010111 0....... ........ */
                    /* insns.decode:155 */
                    if (trans_sll_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x7:
                    /* 00000000 00010111 1....... ........ */
                    /* insns.decode:156 */
                    if (trans_srl_w(ctx, &u.f_rrr)) return true;
                    break;
                }
                break;
            case 0x6:
                /* 00000000 000110.. ........ ........ */
                decode_extract_rrr(ctx, &u.f_rrr, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00011000 0....... ........ */
                    /* insns.decode:157 */
                    if (trans_sra_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x1:
                    /* 00000000 00011000 1....... ........ */
                    /* insns.decode:158 */
                    if (trans_sll_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x2:
                    /* 00000000 00011001 0....... ........ */
                    /* insns.decode:159 */
                    if (trans_srl_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x3:
                    /* 00000000 00011001 1....... ........ */
                    /* insns.decode:160 */
                    if (trans_sra_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x6:
                    /* 00000000 00011011 0....... ........ */
                    /* insns.decode:161 */
                    if (trans_rotr_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x7:
                    /* 00000000 00011011 1....... ........ */
                    /* insns.decode:162 */
                    if (trans_rotr_d(ctx, &u.f_rrr)) return true;
                    break;
                }
                break;
            case 0x7:
                /* 00000000 000111.. ........ ........ */
                decode_extract_rrr(ctx, &u.f_rrr, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00011100 0....... ........ */
                    /* insns.decode:119 */
                    if (trans_mul_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x1:
                    /* 00000000 00011100 1....... ........ */
                    /* insns.decode:120 */
                    if (trans_mulh_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x2:
                    /* 00000000 00011101 0....... ........ */
                    /* insns.decode:121 */
                    if (trans_mulh_wu(ctx, &u.f_rrr)) return true;
                    break;
                case 0x3:
                    /* 00000000 00011101 1....... ........ */
                    /* insns.decode:122 */
                    if (trans_mul_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x4:
                    /* 00000000 00011110 0....... ........ */
                    /* insns.decode:123 */
                    if (trans_mulh_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x5:
                    /* 00000000 00011110 1....... ........ */
                    /* insns.decode:124 */
                    if (trans_mulh_du(ctx, &u.f_rrr)) return true;
                    break;
                case 0x6:
                    /* 00000000 00011111 0....... ........ */
                    /* insns.decode:125 */
                    if (trans_mulw_d_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x7:
                    /* 00000000 00011111 1....... ........ */
                    /* insns.decode:126 */
                    if (trans_mulw_d_wu(ctx, &u.f_rrr)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 00000000 001000.. ........ ........ */
                decode_extract_rrr(ctx, &u.f_rrr, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00100000 0....... ........ */
                    /* insns.decode:127 */
                    if (trans_div_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x1:
                    /* 00000000 00100000 1....... ........ */
                    /* insns.decode:128 */
                    if (trans_mod_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x2:
                    /* 00000000 00100001 0....... ........ */
                    /* insns.decode:129 */
                    if (trans_div_wu(ctx, &u.f_rrr)) return true;
                    break;
                case 0x3:
                    /* 00000000 00100001 1....... ........ */
                    /* insns.decode:130 */
                    if (trans_mod_wu(ctx, &u.f_rrr)) return true;
                    break;
                case 0x4:
                    /* 00000000 00100010 0....... ........ */
                    /* insns.decode:131 */
                    if (trans_div_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x5:
                    /* 00000000 00100010 1....... ........ */
                    /* insns.decode:132 */
                    if (trans_mod_d(ctx, &u.f_rrr)) return true;
                    break;
                case 0x6:
                    /* 00000000 00100011 0....... ........ */
                    /* insns.decode:133 */
                    if (trans_div_du(ctx, &u.f_rrr)) return true;
                    break;
                case 0x7:
                    /* 00000000 00100011 1....... ........ */
                    /* insns.decode:134 */
                    if (trans_mod_du(ctx, &u.f_rrr)) return true;
                    break;
                }
                break;
            case 0x9:
                /* 00000000 001001.. ........ ........ */
                decode_extract_rrr(ctx, &u.f_rrr, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x0:
                    /* 00000000 00100100 0....... ........ */
                    /* insns.decode:300 */
                    if (trans_crc_w_b_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x1:
                    /* 00000000 00100100 1....... ........ */
                    /* insns.decode:301 */
                    if (trans_crc_w_h_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x2:
                    /* 00000000 00100101 0....... ........ */
                    /* insns.decode:302 */
                    if (trans_crc_w_w_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x3:
                    /* 00000000 00100101 1....... ........ */
                    /* insns.decode:303 */
                    if (trans_crc_w_d_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x4:
                    /* 00000000 00100110 0....... ........ */
                    /* insns.decode:304 */
                    if (trans_crcc_w_b_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x5:
                    /* 00000000 00100110 1....... ........ */
                    /* insns.decode:305 */
                    if (trans_crcc_w_h_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x6:
                    /* 00000000 00100111 0....... ........ */
                    /* insns.decode:306 */
                    if (trans_crcc_w_w_w(ctx, &u.f_rrr)) return true;
                    break;
                case 0x7:
                    /* 00000000 00100111 1....... ........ */
                    /* insns.decode:307 */
                    if (trans_crcc_w_d_w(ctx, &u.f_rrr)) return true;
                    break;
                }
                break;
            case 0xa:
                /* 00000000 001010.. ........ ........ */
                decode_extract_i15(ctx, &u.f_i, insn);
                switch ((insn >> 15) & 0x7) {
                case 0x4:
                    /* 00000000 00101010 0....... ........ */
                    /* insns.decode:308 */
                    if (trans_break(ctx, &u.f_i)) return true;
                    break;
                case 0x5:
                    /* 00000000 00101010 1....... ........ */
                    /* insns.decode:486 */
                    if (trans_dbcl(ctx, &u.f_i)) return true;
                    break;
                case 0x6:
                    /* 00000000 00101011 0....... ........ */
                    /* insns.decode:309 */
                    if (trans_syscall(ctx, &u.f_i)) return true;
                    break;
                }
                break;
            case 0xb:
                /* 00000000 001011.. ........ ........ */
                decode_extract_rrr_sa2p1(ctx, &u.f_rrr_sa, insn);
                switch ((insn >> 17) & 0x1) {
                case 0x0:
                    /* 00000000 0010110. ........ ........ */
                    /* insns.decode:137 */
                    if (trans_alsl_d(ctx, &u.f_rrr_sa)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x1:
            /* 00000000 01...... ........ ........ */
            switch ((insn >> 21) & 0x1) {
            case 0x0:
                /* 00000000 010..... ........ ........ */
                switch ((insn >> 16) & 0x1f) {
                case 0x0:
                    /* 00000000 01000000 ........ ........ */
                    decode_extract_rr_ui5(ctx, &u.f_rr_i, insn);
                    switch ((insn >> 15) & 0x1) {
                    case 0x1:
                        /* 00000000 01000000 1....... ........ */
                        /* insns.decode:163 */
                        if (trans_slli_w(ctx, &u.f_rr_i)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* 00000000 01000001 ........ ........ */
                    /* insns.decode:164 */
                    decode_extract_rr_ui6(ctx, &u.f_rr_i, insn);
                    if (trans_slli_d(ctx, &u.f_rr_i)) return true;
                    break;
                case 0x4:
                    /* 00000000 01000100 ........ ........ */
                    decode_extract_rr_ui5(ctx, &u.f_rr_i, insn);
                    switch ((insn >> 15) & 0x1) {
                    case 0x1:
                        /* 00000000 01000100 1....... ........ */
                        /* insns.decode:165 */
                        if (trans_srli_w(ctx, &u.f_rr_i)) return true;
                        break;
                    }
                    break;
                case 0x5:
                    /* 00000000 01000101 ........ ........ */
                    /* insns.decode:166 */
                    decode_extract_rr_ui6(ctx, &u.f_rr_i, insn);
                    if (trans_srli_d(ctx, &u.f_rr_i)) return true;
                    break;
                case 0x8:
                    /* 00000000 01001000 ........ ........ */
                    decode_extract_rr_ui5(ctx, &u.f_rr_i, insn);
                    switch ((insn >> 15) & 0x1) {
                    case 0x1:
                        /* 00000000 01001000 1....... ........ */
                        /* insns.decode:167 */
                        if (trans_srai_w(ctx, &u.f_rr_i)) return true;
                        break;
                    }
                    break;
                case 0x9:
                    /* 00000000 01001001 ........ ........ */
                    /* insns.decode:168 */
                    decode_extract_rr_ui6(ctx, &u.f_rr_i, insn);
                    if (trans_srai_d(ctx, &u.f_rr_i)) return true;
                    break;
                case 0xc:
                    /* 00000000 01001100 ........ ........ */
                    decode_extract_rr_ui5(ctx, &u.f_rr_i, insn);
                    switch ((insn >> 15) & 0x1) {
                    case 0x1:
                        /* 00000000 01001100 1....... ........ */
                        /* insns.decode:169 */
                        if (trans_rotri_w(ctx, &u.f_rr_i)) return true;
                        break;
                    }
                    break;
                case 0xd:
                    /* 00000000 01001101 ........ ........ */
                    /* insns.decode:170 */
                    decode_extract_rr_ui6(ctx, &u.f_rr_i, insn);
                    if (trans_rotri_d(ctx, &u.f_rr_i)) return true;
                    break;
                }
                break;
            case 0x1:
                /* 00000000 011..... ........ ........ */
                decode_extract_rr_2bw(ctx, &u.f_rr_ms_ls, insn);
                switch ((insn >> 15) & 0x1) {
                case 0x0:
                    /* 00000000 011..... 0....... ........ */
                    /* insns.decode:199 */
                    if (trans_bstrins_w(ctx, &u.f_rr_ms_ls)) return true;
                    break;
                case 0x1:
                    /* 00000000 011..... 1....... ........ */
                    /* insns.decode:200 */
                    if (trans_bstrpick_w(ctx, &u.f_rr_ms_ls)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x2:
            /* 00000000 10...... ........ ........ */
            /* insns.decode:201 */
            decode_extract_rr_2bd(ctx, &u.f_rr_ms_ls, insn);
            if (trans_bstrins_d(ctx, &u.f_rr_ms_ls)) return true;
            break;
        case 0x3:
            /* 00000000 11...... ........ ........ */
            /* insns.decode:202 */
            decode_extract_rr_2bd(ctx, &u.f_rr_ms_ls, insn);
            if (trans_bstrpick_d(ctx, &u.f_rr_ms_ls)) return true;
            break;
        case 0x4:
            /* 00000001 00...... ........ ........ */
            switch ((insn >> 15) & 0x7f) {
            case 0x1:
                /* 00000001 00000000 1....... ........ */
                /* insns.decode:320 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fadd_s(ctx, &u.f_fff)) return true;
                break;
            case 0x2:
                /* 00000001 00000001 0....... ........ */
                /* insns.decode:321 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fadd_d(ctx, &u.f_fff)) return true;
                break;
            case 0x5:
                /* 00000001 00000010 1....... ........ */
                /* insns.decode:322 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fsub_s(ctx, &u.f_fff)) return true;
                break;
            case 0x6:
                /* 00000001 00000011 0....... ........ */
                /* insns.decode:323 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fsub_d(ctx, &u.f_fff)) return true;
                break;
            case 0x9:
                /* 00000001 00000100 1....... ........ */
                /* insns.decode:324 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmul_s(ctx, &u.f_fff)) return true;
                break;
            case 0xa:
                /* 00000001 00000101 0....... ........ */
                /* insns.decode:325 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmul_d(ctx, &u.f_fff)) return true;
                break;
            case 0xd:
                /* 00000001 00000110 1....... ........ */
                /* insns.decode:326 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fdiv_s(ctx, &u.f_fff)) return true;
                break;
            case 0xe:
                /* 00000001 00000111 0....... ........ */
                /* insns.decode:327 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fdiv_d(ctx, &u.f_fff)) return true;
                break;
            case 0x11:
                /* 00000001 00001000 1....... ........ */
                /* insns.decode:336 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmax_s(ctx, &u.f_fff)) return true;
                break;
            case 0x12:
                /* 00000001 00001001 0....... ........ */
                /* insns.decode:337 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmax_d(ctx, &u.f_fff)) return true;
                break;
            case 0x15:
                /* 00000001 00001010 1....... ........ */
                /* insns.decode:338 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmin_s(ctx, &u.f_fff)) return true;
                break;
            case 0x16:
                /* 00000001 00001011 0....... ........ */
                /* insns.decode:339 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmin_d(ctx, &u.f_fff)) return true;
                break;
            case 0x19:
                /* 00000001 00001100 1....... ........ */
                /* insns.decode:340 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmaxa_s(ctx, &u.f_fff)) return true;
                break;
            case 0x1a:
                /* 00000001 00001101 0....... ........ */
                /* insns.decode:341 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmaxa_d(ctx, &u.f_fff)) return true;
                break;
            case 0x1d:
                /* 00000001 00001110 1....... ........ */
                /* insns.decode:342 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmina_s(ctx, &u.f_fff)) return true;
                break;
            case 0x1e:
                /* 00000001 00001111 0....... ........ */
                /* insns.decode:343 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fmina_d(ctx, &u.f_fff)) return true;
                break;
            case 0x21:
                /* 00000001 00010000 1....... ........ */
                /* insns.decode:354 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fscaleb_s(ctx, &u.f_fff)) return true;
                break;
            case 0x22:
                /* 00000001 00010001 0....... ........ */
                /* insns.decode:355 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fscaleb_d(ctx, &u.f_fff)) return true;
                break;
            case 0x25:
                /* 00000001 00010010 1....... ........ */
                /* insns.decode:358 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fcopysign_s(ctx, &u.f_fff)) return true;
                break;
            case 0x26:
                /* 00000001 00010011 0....... ........ */
                /* insns.decode:359 */
                decode_extract_fff(ctx, &u.f_fff, insn);
                if (trans_fcopysign_d(ctx, &u.f_fff)) return true;
                break;
            case 0x28:
                /* 00000001 00010100 0....... ........ */
                decode_extract_ff(ctx, &u.f_ff, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x1:
                    /* 00000001 00010100 000001.. ........ */
                    /* insns.decode:344 */
                    if (trans_fabs_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x2:
                    /* 00000001 00010100 000010.. ........ */
                    /* insns.decode:345 */
                    if (trans_fabs_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x5:
                    /* 00000001 00010100 000101.. ........ */
                    /* insns.decode:346 */
                    if (trans_fneg_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x6:
                    /* 00000001 00010100 000110.. ........ */
                    /* insns.decode:347 */
                    if (trans_fneg_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x9:
                    /* 00000001 00010100 001001.. ........ */
                    /* insns.decode:356 */
                    if (trans_flogb_s(ctx, &u.f_ff)) return true;
                    break;
                case 0xa:
                    /* 00000001 00010100 001010.. ........ */
                    /* insns.decode:357 */
                    if (trans_flogb_d(ctx, &u.f_ff)) return true;
                    break;
                case 0xd:
                    /* 00000001 00010100 001101.. ........ */
                    /* insns.decode:360 */
                    if (trans_fclass_s(ctx, &u.f_ff)) return true;
                    break;
                case 0xe:
                    /* 00000001 00010100 001110.. ........ */
                    /* insns.decode:361 */
                    if (trans_fclass_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x11:
                    /* 00000001 00010100 010001.. ........ */
                    /* insns.decode:348 */
                    if (trans_fsqrt_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x12:
                    /* 00000001 00010100 010010.. ........ */
                    /* insns.decode:349 */
                    if (trans_fsqrt_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x15:
                    /* 00000001 00010100 010101.. ........ */
                    /* insns.decode:350 */
                    if (trans_frecip_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x16:
                    /* 00000001 00010100 010110.. ........ */
                    /* insns.decode:351 */
                    if (trans_frecip_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x19:
                    /* 00000001 00010100 011001.. ........ */
                    /* insns.decode:352 */
                    if (trans_frsqrt_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x1a:
                    /* 00000001 00010100 011010.. ........ */
                    /* insns.decode:353 */
                    if (trans_frsqrt_d(ctx, &u.f_ff)) return true;
                    break;
                }
                break;
            case 0x29:
                /* 00000001 00010100 1....... ........ */
                switch ((insn >> 10) & 0x1f) {
                case 0x5:
                    /* 00000001 00010100 100101.. ........ */
                    /* insns.decode:404 */
                    decode_extract_ff(ctx, &u.f_ff, insn);
                    if (trans_fmov_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x6:
                    /* 00000001 00010100 100110.. ........ */
                    /* insns.decode:405 */
                    decode_extract_ff(ctx, &u.f_ff, insn);
                    if (trans_fmov_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x9:
                    /* 00000001 00010100 101001.. ........ */
                    /* insns.decode:407 */
                    decode_extract_fr(ctx, &u.f_fr, insn);
                    if (trans_movgr2fr_w(ctx, &u.f_fr)) return true;
                    break;
                case 0xa:
                    /* 00000001 00010100 101010.. ........ */
                    /* insns.decode:408 */
                    decode_extract_fr(ctx, &u.f_fr, insn);
                    if (trans_movgr2fr_d(ctx, &u.f_fr)) return true;
                    break;
                case 0xb:
                    /* 00000001 00010100 101011.. ........ */
                    /* insns.decode:409 */
                    decode_extract_fr(ctx, &u.f_fr, insn);
                    if (trans_movgr2frh_w(ctx, &u.f_fr)) return true;
                    break;
                case 0xd:
                    /* 00000001 00010100 101101.. ........ */
                    /* insns.decode:410 */
                    decode_extract_rf(ctx, &u.f_rf, insn);
                    if (trans_movfr2gr_s(ctx, &u.f_rf)) return true;
                    break;
                case 0xe:
                    /* 00000001 00010100 101110.. ........ */
                    /* insns.decode:411 */
                    decode_extract_rf(ctx, &u.f_rf, insn);
                    if (trans_movfr2gr_d(ctx, &u.f_rf)) return true;
                    break;
                case 0xf:
                    /* 00000001 00010100 101111.. ........ */
                    /* insns.decode:412 */
                    decode_extract_rf(ctx, &u.f_rf, insn);
                    if (trans_movfrh2gr_s(ctx, &u.f_rf)) return true;
                    break;
                case 0x10:
                    /* 00000001 00010100 110000.. ........ */
                    /* insns.decode:413 */
                    decode_extract_fcsrd_r(ctx, &u.f_fcsrd_r, insn);
                    if (trans_movgr2fcsr(ctx, &u.f_fcsrd_r)) return true;
                    break;
                case 0x12:
                    /* 00000001 00010100 110010.. ........ */
                    /* insns.decode:414 */
                    decode_extract_r_fcsrs(ctx, &u.f_r_fcsrs, insn);
                    if (trans_movfcsr2gr(ctx, &u.f_r_fcsrs)) return true;
                    break;
                case 0x14:
                    /* 00000001 00010100 110100.. ........ */
                    decode_extract_cf(ctx, &u.f_cf, insn);
                    switch ((insn >> 3) & 0x3) {
                    case 0x0:
                        /* 00000001 00010100 110100.. ...00... */
                        /* insns.decode:415 */
                        if (trans_movfr2cf(ctx, &u.f_cf)) return true;
                        break;
                    }
                    break;
                case 0x15:
                    /* 00000001 00010100 110101.. ........ */
                    decode_extract_fc(ctx, &u.f_fc, insn);
                    switch ((insn >> 8) & 0x3) {
                    case 0x0:
                        /* 00000001 00010100 11010100 ........ */
                        /* insns.decode:416 */
                        if (trans_movcf2fr(ctx, &u.f_fc)) return true;
                        break;
                    }
                    break;
                case 0x16:
                    /* 00000001 00010100 110110.. ........ */
                    decode_extract_cr(ctx, &u.f_cr, insn);
                    switch ((insn >> 3) & 0x3) {
                    case 0x0:
                        /* 00000001 00010100 110110.. ...00... */
                        /* insns.decode:417 */
                        if (trans_movgr2cf(ctx, &u.f_cr)) return true;
                        break;
                    }
                    break;
                case 0x17:
                    /* 00000001 00010100 110111.. ........ */
                    decode_extract_rc(ctx, &u.f_rc, insn);
                    switch ((insn >> 8) & 0x3) {
                    case 0x0:
                        /* 00000001 00010100 11011100 ........ */
                        /* insns.decode:418 */
                        if (trans_movcf2gr(ctx, &u.f_rc)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x32:
                /* 00000001 00011001 0....... ........ */
                decode_extract_ff(ctx, &u.f_ff, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x6:
                    /* 00000001 00011001 000110.. ........ */
                    /* insns.decode:372 */
                    if (trans_fcvt_s_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x9:
                    /* 00000001 00011001 001001.. ........ */
                    /* insns.decode:373 */
                    if (trans_fcvt_d_s(ctx, &u.f_ff)) return true;
                    break;
                }
                break;
            case 0x34:
                /* 00000001 00011010 0....... ........ */
                decode_extract_ff(ctx, &u.f_ff, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x1:
                    /* 00000001 00011010 000001.. ........ */
                    /* insns.decode:374 */
                    if (trans_ftintrm_w_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x2:
                    /* 00000001 00011010 000010.. ........ */
                    /* insns.decode:375 */
                    if (trans_ftintrm_w_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x9:
                    /* 00000001 00011010 001001.. ........ */
                    /* insns.decode:376 */
                    if (trans_ftintrm_l_s(ctx, &u.f_ff)) return true;
                    break;
                case 0xa:
                    /* 00000001 00011010 001010.. ........ */
                    /* insns.decode:377 */
                    if (trans_ftintrm_l_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x11:
                    /* 00000001 00011010 010001.. ........ */
                    /* insns.decode:378 */
                    if (trans_ftintrp_w_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x12:
                    /* 00000001 00011010 010010.. ........ */
                    /* insns.decode:379 */
                    if (trans_ftintrp_w_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x19:
                    /* 00000001 00011010 011001.. ........ */
                    /* insns.decode:380 */
                    if (trans_ftintrp_l_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x1a:
                    /* 00000001 00011010 011010.. ........ */
                    /* insns.decode:381 */
                    if (trans_ftintrp_l_d(ctx, &u.f_ff)) return true;
                    break;
                }
                break;
            case 0x35:
                /* 00000001 00011010 1....... ........ */
                decode_extract_ff(ctx, &u.f_ff, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x1:
                    /* 00000001 00011010 100001.. ........ */
                    /* insns.decode:382 */
                    if (trans_ftintrz_w_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x2:
                    /* 00000001 00011010 100010.. ........ */
                    /* insns.decode:383 */
                    if (trans_ftintrz_w_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x9:
                    /* 00000001 00011010 101001.. ........ */
                    /* insns.decode:384 */
                    if (trans_ftintrz_l_s(ctx, &u.f_ff)) return true;
                    break;
                case 0xa:
                    /* 00000001 00011010 101010.. ........ */
                    /* insns.decode:385 */
                    if (trans_ftintrz_l_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x11:
                    /* 00000001 00011010 110001.. ........ */
                    /* insns.decode:386 */
                    if (trans_ftintrne_w_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x12:
                    /* 00000001 00011010 110010.. ........ */
                    /* insns.decode:387 */
                    if (trans_ftintrne_w_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x19:
                    /* 00000001 00011010 111001.. ........ */
                    /* insns.decode:388 */
                    if (trans_ftintrne_l_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x1a:
                    /* 00000001 00011010 111010.. ........ */
                    /* insns.decode:389 */
                    if (trans_ftintrne_l_d(ctx, &u.f_ff)) return true;
                    break;
                }
                break;
            case 0x36:
                /* 00000001 00011011 0....... ........ */
                decode_extract_ff(ctx, &u.f_ff, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x1:
                    /* 00000001 00011011 000001.. ........ */
                    /* insns.decode:390 */
                    if (trans_ftint_w_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x2:
                    /* 00000001 00011011 000010.. ........ */
                    /* insns.decode:391 */
                    if (trans_ftint_w_d(ctx, &u.f_ff)) return true;
                    break;
                case 0x9:
                    /* 00000001 00011011 001001.. ........ */
                    /* insns.decode:392 */
                    if (trans_ftint_l_s(ctx, &u.f_ff)) return true;
                    break;
                case 0xa:
                    /* 00000001 00011011 001010.. ........ */
                    /* insns.decode:393 */
                    if (trans_ftint_l_d(ctx, &u.f_ff)) return true;
                    break;
                }
                break;
            case 0x3a:
                /* 00000001 00011101 0....... ........ */
                decode_extract_ff(ctx, &u.f_ff, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x4:
                    /* 00000001 00011101 000100.. ........ */
                    /* insns.decode:394 */
                    if (trans_ffint_s_w(ctx, &u.f_ff)) return true;
                    break;
                case 0x6:
                    /* 00000001 00011101 000110.. ........ */
                    /* insns.decode:395 */
                    if (trans_ffint_s_l(ctx, &u.f_ff)) return true;
                    break;
                case 0x8:
                    /* 00000001 00011101 001000.. ........ */
                    /* insns.decode:396 */
                    if (trans_ffint_d_w(ctx, &u.f_ff)) return true;
                    break;
                case 0xa:
                    /* 00000001 00011101 001010.. ........ */
                    /* insns.decode:397 */
                    if (trans_ffint_d_l(ctx, &u.f_ff)) return true;
                    break;
                }
                break;
            case 0x3c:
                /* 00000001 00011110 0....... ........ */
                decode_extract_ff(ctx, &u.f_ff, insn);
                switch ((insn >> 10) & 0x1f) {
                case 0x11:
                    /* 00000001 00011110 010001.. ........ */
                    /* insns.decode:398 */
                    if (trans_frint_s(ctx, &u.f_ff)) return true;
                    break;
                case 0x12:
                    /* 00000001 00011110 010010.. ........ */
                    /* insns.decode:399 */
                    if (trans_frint_d(ctx, &u.f_ff)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x8:
            /* 00000010 00...... ........ ........ */
            /* insns.decode:111 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_slti(ctx, &u.f_rr_i)) return true;
            break;
        case 0x9:
            /* 00000010 01...... ........ ........ */
            /* insns.decode:112 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_sltui(ctx, &u.f_rr_i)) return true;
            break;
        case 0xa:
            /* 00000010 10...... ........ ........ */
            /* insns.decode:145 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_addi_w(ctx, &u.f_rr_i)) return true;
            break;
        case 0xb:
            /* 00000010 11...... ........ ........ */
            /* insns.decode:146 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_addi_d(ctx, &u.f_rr_i)) return true;
            break;
        case 0xc:
            /* 00000011 00...... ........ ........ */
            /* insns.decode:140 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_lu52i_d(ctx, &u.f_rr_i)) return true;
            break;
        case 0xd:
            /* 00000011 01...... ........ ........ */
            /* insns.decode:148 */
            decode_extract_rr_ui12(ctx, &u.f_rr_i, insn);
            if (trans_andi(ctx, &u.f_rr_i)) return true;
            break;
        case 0xe:
            /* 00000011 10...... ........ ........ */
            /* insns.decode:149 */
            decode_extract_rr_ui12(ctx, &u.f_rr_i, insn);
            if (trans_ori(ctx, &u.f_rr_i)) return true;
            break;
        case 0xf:
            /* 00000011 11...... ........ ........ */
            /* insns.decode:150 */
            decode_extract_rr_ui12(ctx, &u.f_rr_i, insn);
            if (trans_xori(ctx, &u.f_rr_i)) return true;
            break;
        }
        break;
    case 0x1:
        /* 000001.. ........ ........ ........ */
        switch ((insn >> 24) & 0x3) {
        case 0x0:
            /* 00000100 ........ ........ ........ */
            if ((insn & 0x000003e0) == 0x00000000) {
                /* 00000100 ........ ......00 000..... */
                /* insns.decode:461 */
                decode_extract_r_csr(ctx, &u.f_r_csr, insn);
                if (trans_csrrd(ctx, &u.f_r_csr)) return true;
            }
            if ((insn & 0x000003e0) == 0x00000020) {
                /* 00000100 ........ ......00 001..... */
                /* insns.decode:462 */
                decode_extract_r_csr(ctx, &u.f_r_csr, insn);
                if (trans_csrwr(ctx, &u.f_r_csr)) return true;
            }
            /* insns.decode:463 */
            decode_extract_rr_csr(ctx, &u.f_rr_csr, insn);
            if (trans_csrxchg(ctx, &u.f_rr_csr)) return true;
            break;
        case 0x2:
            /* 00000110 ........ ........ ........ */
            switch ((insn >> 22) & 0x3) {
            case 0x0:
                /* 00000110 00...... ........ ........ */
                /* insns.decode:481 */
                decode_extract_cop_r_i(ctx, &u.f_cop_r_i, insn);
                if (trans_cacop(ctx, &u.f_cop_r_i)) return true;
                break;
            case 0x1:
                /* 00000110 01...... ........ ........ */
                switch ((insn >> 18) & 0xf) {
                case 0x0:
                    /* 00000110 010000.. ........ ........ */
                    /* insns.decode:482 */
                    decode_extract_rr_ui8(ctx, &u.f_rr_i, insn);
                    if (trans_lddir(ctx, &u.f_rr_i)) return true;
                    break;
                case 0x1:
                    /* 00000110 010001.. ........ ........ */
                    decode_extract_j_i(ctx, &u.f_j_i, insn);
                    switch (insn & 0x0000001f) {
                    case 0x00000000:
                        /* 00000110 010001.. ........ ...00000 */
                        /* insns.decode:483 */
                        if (trans_ldpte(ctx, &u.f_j_i)) return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 00000110 010010.. ........ ........ */
                    switch ((insn >> 15) & 0x7) {
                    case 0x0:
                        /* 00000110 01001000 0....... ........ */
                        switch ((insn >> 10) & 0x1f) {
                        case 0x0:
                            /* 00000110 01001000 000000.. ........ */
                            /* insns.decode:466 */
                            decode_extract_rr(ctx, &u.f_rr, insn);
                            if (trans_iocsrrd_b(ctx, &u.f_rr)) return true;
                            break;
                        case 0x1:
                            /* 00000110 01001000 000001.. ........ */
                            /* insns.decode:467 */
                            decode_extract_rr(ctx, &u.f_rr, insn);
                            if (trans_iocsrrd_h(ctx, &u.f_rr)) return true;
                            break;
                        case 0x2:
                            /* 00000110 01001000 000010.. ........ */
                            /* insns.decode:468 */
                            decode_extract_rr(ctx, &u.f_rr, insn);
                            if (trans_iocsrrd_w(ctx, &u.f_rr)) return true;
                            break;
                        case 0x3:
                            /* 00000110 01001000 000011.. ........ */
                            /* insns.decode:469 */
                            decode_extract_rr(ctx, &u.f_rr, insn);
                            if (trans_iocsrrd_d(ctx, &u.f_rr)) return true;
                            break;
                        case 0x4:
                            /* 00000110 01001000 000100.. ........ */
                            /* insns.decode:470 */
                            decode_extract_rr(ctx, &u.f_rr, insn);
                            if (trans_iocsrwr_b(ctx, &u.f_rr)) return true;
                            break;
                        case 0x5:
                            /* 00000110 01001000 000101.. ........ */
                            /* insns.decode:471 */
                            decode_extract_rr(ctx, &u.f_rr, insn);
                            if (trans_iocsrwr_h(ctx, &u.f_rr)) return true;
                            break;
                        case 0x6:
                            /* 00000110 01001000 000110.. ........ */
                            /* insns.decode:472 */
                            decode_extract_rr(ctx, &u.f_rr, insn);
                            if (trans_iocsrwr_w(ctx, &u.f_rr)) return true;
                            break;
                        case 0x7:
                            /* 00000110 01001000 000111.. ........ */
                            /* insns.decode:473 */
                            decode_extract_rr(ctx, &u.f_rr, insn);
                            if (trans_iocsrwr_d(ctx, &u.f_rr)) return true;
                            break;
                        case 0x8:
                            /* 00000110 01001000 001000.. ........ */
                            decode_extract_empty(ctx, &u.f_empty, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00100000 00000000 */
                                /* insns.decode:478 */
                                if (trans_tlbclr(ctx, &u.f_empty)) return true;
                                break;
                            }
                            break;
                        case 0x9:
                            /* 00000110 01001000 001001.. ........ */
                            decode_extract_empty(ctx, &u.f_empty, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00100100 00000000 */
                                /* insns.decode:479 */
                                if (trans_tlbflush(ctx, &u.f_empty)) return true;
                                break;
                            }
                            break;
                        case 0xa:
                            /* 00000110 01001000 001010.. ........ */
                            decode_extract_empty(ctx, &u.f_empty, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00101000 00000000 */
                                /* insns.decode:474 */
                                if (trans_tlbsrch(ctx, &u.f_empty)) return true;
                                break;
                            }
                            break;
                        case 0xb:
                            /* 00000110 01001000 001011.. ........ */
                            decode_extract_empty(ctx, &u.f_empty, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00101100 00000000 */
                                /* insns.decode:475 */
                                if (trans_tlbrd(ctx, &u.f_empty)) return true;
                                break;
                            }
                            break;
                        case 0xc:
                            /* 00000110 01001000 001100.. ........ */
                            decode_extract_empty(ctx, &u.f_empty, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00110000 00000000 */
                                /* insns.decode:476 */
                                if (trans_tlbwr(ctx, &u.f_empty)) return true;
                                break;
                            }
                            break;
                        case 0xd:
                            /* 00000110 01001000 001101.. ........ */
                            decode_extract_empty(ctx, &u.f_empty, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00110100 00000000 */
                                /* insns.decode:477 */
                                if (trans_tlbfill(ctx, &u.f_empty)) return true;
                                break;
                            }
                            break;
                        case 0xe:
                            /* 00000110 01001000 001110.. ........ */
                            decode_extract_empty(ctx, &u.f_empty, insn);
                            switch (insn & 0x000003ff) {
                            case 0x00000000:
                                /* 00000110 01001000 00111000 00000000 */
                                /* insns.decode:484 */
                                if (trans_ertn(ctx, &u.f_empty)) return true;
                                break;
                            }
                            break;
                        }
                        break;
                    case 0x1:
                        /* 00000110 01001000 1....... ........ */
                        /* insns.decode:485 */
                        decode_extract_i15(ctx, &u.f_i, insn);
                        if (trans_idle(ctx, &u.f_i)) return true;
                        break;
                    case 0x3:
                        /* 00000110 01001001 1....... ........ */
                        /* insns.decode:480 */
                        decode_extract_i_rr(ctx, &u.f_i_rr, insn);
                        if (trans_invtlb(ctx, &u.f_i_rr)) return true;
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        }
        break;
    case 0x2:
        /* 000010.. ........ ........ ........ */
        decode_extract_ffff(ctx, &u.f_ffff, insn);
        switch ((insn >> 20) & 0x3f) {
        case 0x1:
            /* 00001000 0001.... ........ ........ */
            /* insns.decode:328 */
            if (trans_fmadd_s(ctx, &u.f_ffff)) return true;
            break;
        case 0x2:
            /* 00001000 0010.... ........ ........ */
            /* insns.decode:329 */
            if (trans_fmadd_d(ctx, &u.f_ffff)) return true;
            break;
        case 0x5:
            /* 00001000 0101.... ........ ........ */
            /* insns.decode:330 */
            if (trans_fmsub_s(ctx, &u.f_ffff)) return true;
            break;
        case 0x6:
            /* 00001000 0110.... ........ ........ */
            /* insns.decode:331 */
            if (trans_fmsub_d(ctx, &u.f_ffff)) return true;
            break;
        case 0x9:
            /* 00001000 1001.... ........ ........ */
            /* insns.decode:332 */
            if (trans_fnmadd_s(ctx, &u.f_ffff)) return true;
            break;
        case 0xa:
            /* 00001000 1010.... ........ ........ */
            /* insns.decode:333 */
            if (trans_fnmadd_d(ctx, &u.f_ffff)) return true;
            break;
        case 0xd:
            /* 00001000 1101.... ........ ........ */
            /* insns.decode:334 */
            if (trans_fnmsub_s(ctx, &u.f_ffff)) return true;
            break;
        case 0xe:
            /* 00001000 1110.... ........ ........ */
            /* insns.decode:335 */
            if (trans_fnmsub_d(ctx, &u.f_ffff)) return true;
            break;
        }
        break;
    case 0x3:
        /* 000011.. ........ ........ ........ */
        switch ((insn >> 20) & 0x3f) {
        case 0x1:
            /* 00001100 0001.... ........ ........ */
            decode_extract_cff_fcond(ctx, &u.f_cff_fcond, insn);
            switch ((insn >> 3) & 0x3) {
            case 0x0:
                /* 00001100 0001.... ........ ...00... */
                /* insns.decode:366 */
                if (trans_fcmp_cond_s(ctx, &u.f_cff_fcond)) return true;
                break;
            }
            break;
        case 0x2:
            /* 00001100 0010.... ........ ........ */
            decode_extract_cff_fcond(ctx, &u.f_cff_fcond, insn);
            switch ((insn >> 3) & 0x3) {
            case 0x0:
                /* 00001100 0010.... ........ ...00... */
                /* insns.decode:367 */
                if (trans_fcmp_cond_d(ctx, &u.f_cff_fcond)) return true;
                break;
            }
            break;
        case 0x10:
            /* 00001101 0000.... ........ ........ */
            decode_extract_fffc(ctx, &u.f_fffc, insn);
            switch ((insn >> 18) & 0x3) {
            case 0x0:
                /* 00001101 000000.. ........ ........ */
                /* insns.decode:406 */
                if (trans_fsel(ctx, &u.f_fffc)) return true;
                break;
            }
            break;
        }
        break;
    case 0x4:
        /* 000100.. ........ ........ ........ */
        /* insns.decode:147 */
        decode_extract_rr_i16(ctx, &u.f_rr_i, insn);
        if (trans_addu16i_d(ctx, &u.f_rr_i)) return true;
        break;
    case 0x5:
        /* 000101.. ........ ........ ........ */
        decode_extract_r_i20(ctx, &u.f_r_i, insn);
        switch ((insn >> 25) & 0x1) {
        case 0x0:
            /* 0001010. ........ ........ ........ */
            /* insns.decode:138 */
            if (trans_lu12i_w(ctx, &u.f_r_i)) return true;
            break;
        case 0x1:
            /* 0001011. ........ ........ ........ */
            /* insns.decode:139 */
            if (trans_lu32i_d(ctx, &u.f_r_i)) return true;
            break;
        }
        break;
    case 0x6:
        /* 000110.. ........ ........ ........ */
        decode_extract_r_i20(ctx, &u.f_r_i, insn);
        switch ((insn >> 25) & 0x1) {
        case 0x0:
            /* 0001100. ........ ........ ........ */
            /* insns.decode:141 */
            if (trans_pcaddi(ctx, &u.f_r_i)) return true;
            break;
        case 0x1:
            /* 0001101. ........ ........ ........ */
            /* insns.decode:142 */
            if (trans_pcalau12i(ctx, &u.f_r_i)) return true;
            break;
        }
        break;
    case 0x7:
        /* 000111.. ........ ........ ........ */
        decode_extract_r_i20(ctx, &u.f_r_i, insn);
        switch ((insn >> 25) & 0x1) {
        case 0x0:
            /* 0001110. ........ ........ ........ */
            /* insns.decode:143 */
            if (trans_pcaddu12i(ctx, &u.f_r_i)) return true;
            break;
        case 0x1:
            /* 0001111. ........ ........ ........ */
            /* insns.decode:144 */
            if (trans_pcaddu18i(ctx, &u.f_r_i)) return true;
            break;
        }
        break;
    case 0x8:
        /* 001000.. ........ ........ ........ */
        decode_extract_rr_i14s2(ctx, &u.f_rr_i, insn);
        switch ((insn >> 24) & 0x3) {
        case 0x0:
            /* 00100000 ........ ........ ........ */
            /* insns.decode:256 */
            if (trans_ll_w(ctx, &u.f_rr_i)) return true;
            break;
        case 0x1:
            /* 00100001 ........ ........ ........ */
            /* insns.decode:257 */
            if (trans_sc_w(ctx, &u.f_rr_i)) return true;
            break;
        case 0x2:
            /* 00100010 ........ ........ ........ */
            /* insns.decode:258 */
            if (trans_ll_d(ctx, &u.f_rr_i)) return true;
            break;
        case 0x3:
            /* 00100011 ........ ........ ........ */
            /* insns.decode:259 */
            if (trans_sc_d(ctx, &u.f_rr_i)) return true;
            break;
        }
        break;
    case 0x9:
        /* 001001.. ........ ........ ........ */
        decode_extract_rr_i14s2(ctx, &u.f_rr_i, insn);
        switch ((insn >> 24) & 0x3) {
        case 0x0:
            /* 00100100 ........ ........ ........ */
            /* insns.decode:232 */
            if (trans_ldptr_w(ctx, &u.f_rr_i)) return true;
            break;
        case 0x1:
            /* 00100101 ........ ........ ........ */
            /* insns.decode:233 */
            if (trans_stptr_w(ctx, &u.f_rr_i)) return true;
            break;
        case 0x2:
            /* 00100110 ........ ........ ........ */
            /* insns.decode:234 */
            if (trans_ldptr_d(ctx, &u.f_rr_i)) return true;
            break;
        case 0x3:
            /* 00100111 ........ ........ ........ */
            /* insns.decode:235 */
            if (trans_stptr_d(ctx, &u.f_rr_i)) return true;
            break;
        }
        break;
    case 0xa:
        /* 001010.. ........ ........ ........ */
        switch ((insn >> 22) & 0xf) {
        case 0x0:
            /* 00101000 00...... ........ ........ */
            /* insns.decode:207 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_ld_b(ctx, &u.f_rr_i)) return true;
            break;
        case 0x1:
            /* 00101000 01...... ........ ........ */
            /* insns.decode:208 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_ld_h(ctx, &u.f_rr_i)) return true;
            break;
        case 0x2:
            /* 00101000 10...... ........ ........ */
            /* insns.decode:209 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_ld_w(ctx, &u.f_rr_i)) return true;
            break;
        case 0x3:
            /* 00101000 11...... ........ ........ */
            /* insns.decode:210 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_ld_d(ctx, &u.f_rr_i)) return true;
            break;
        case 0x4:
            /* 00101001 00...... ........ ........ */
            /* insns.decode:211 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_st_b(ctx, &u.f_rr_i)) return true;
            break;
        case 0x5:
            /* 00101001 01...... ........ ........ */
            /* insns.decode:212 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_st_h(ctx, &u.f_rr_i)) return true;
            break;
        case 0x6:
            /* 00101001 10...... ........ ........ */
            /* insns.decode:213 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_st_w(ctx, &u.f_rr_i)) return true;
            break;
        case 0x7:
            /* 00101001 11...... ........ ........ */
            /* insns.decode:214 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_st_d(ctx, &u.f_rr_i)) return true;
            break;
        case 0x8:
            /* 00101010 00...... ........ ........ */
            /* insns.decode:215 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_ld_bu(ctx, &u.f_rr_i)) return true;
            break;
        case 0x9:
            /* 00101010 01...... ........ ........ */
            /* insns.decode:216 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_ld_hu(ctx, &u.f_rr_i)) return true;
            break;
        case 0xa:
            /* 00101010 10...... ........ ........ */
            /* insns.decode:217 */
            decode_extract_rr_i12(ctx, &u.f_rr_i, insn);
            if (trans_ld_wu(ctx, &u.f_rr_i)) return true;
            break;
        case 0xb:
            /* 00101010 11...... ........ ........ */
            /* insns.decode:229 */
            decode_extract_hint_r_i12(ctx, &u.f_hint_r_i, insn);
            if (trans_preld(ctx, &u.f_hint_r_i)) return true;
            break;
        case 0xc:
            /* 00101011 00...... ........ ........ */
            /* insns.decode:423 */
            decode_extract_fr_i12(ctx, &u.f_fr_i, insn);
            if (trans_fld_s(ctx, &u.f_fr_i)) return true;
            break;
        case 0xd:
            /* 00101011 01...... ........ ........ */
            /* insns.decode:424 */
            decode_extract_fr_i12(ctx, &u.f_fr_i, insn);
            if (trans_fst_s(ctx, &u.f_fr_i)) return true;
            break;
        case 0xe:
            /* 00101011 10...... ........ ........ */
            /* insns.decode:425 */
            decode_extract_fr_i12(ctx, &u.f_fr_i, insn);
            if (trans_fld_d(ctx, &u.f_fr_i)) return true;
            break;
        case 0xf:
            /* 00101011 11...... ........ ........ */
            /* insns.decode:426 */
            decode_extract_fr_i12(ctx, &u.f_fr_i, insn);
            if (trans_fst_d(ctx, &u.f_fr_i)) return true;
            break;
        }
        break;
    case 0xe:
        /* 001110.. ........ ........ ........ */
        switch ((insn >> 15) & 0x7ff) {
        case 0x0:
            /* 00111000 00000000 0....... ........ */
            /* insns.decode:218 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldx_b(ctx, &u.f_rrr)) return true;
            break;
        case 0x8:
            /* 00111000 00000100 0....... ........ */
            /* insns.decode:219 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldx_h(ctx, &u.f_rrr)) return true;
            break;
        case 0x10:
            /* 00111000 00001000 0....... ........ */
            /* insns.decode:220 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldx_w(ctx, &u.f_rrr)) return true;
            break;
        case 0x18:
            /* 00111000 00001100 0....... ........ */
            /* insns.decode:221 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldx_d(ctx, &u.f_rrr)) return true;
            break;
        case 0x20:
            /* 00111000 00010000 0....... ........ */
            /* insns.decode:222 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stx_b(ctx, &u.f_rrr)) return true;
            break;
        case 0x28:
            /* 00111000 00010100 0....... ........ */
            /* insns.decode:223 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stx_h(ctx, &u.f_rrr)) return true;
            break;
        case 0x30:
            /* 00111000 00011000 0....... ........ */
            /* insns.decode:224 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stx_w(ctx, &u.f_rrr)) return true;
            break;
        case 0x38:
            /* 00111000 00011100 0....... ........ */
            /* insns.decode:225 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stx_d(ctx, &u.f_rrr)) return true;
            break;
        case 0x40:
            /* 00111000 00100000 0....... ........ */
            /* insns.decode:226 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldx_bu(ctx, &u.f_rrr)) return true;
            break;
        case 0x48:
            /* 00111000 00100100 0....... ........ */
            /* insns.decode:227 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldx_hu(ctx, &u.f_rrr)) return true;
            break;
        case 0x50:
            /* 00111000 00101000 0....... ........ */
            /* insns.decode:228 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldx_wu(ctx, &u.f_rrr)) return true;
            break;
        case 0x60:
            /* 00111000 00110000 0....... ........ */
            /* insns.decode:427 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fldx_s(ctx, &u.f_frr)) return true;
            break;
        case 0x68:
            /* 00111000 00110100 0....... ........ */
            /* insns.decode:428 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fldx_d(ctx, &u.f_frr)) return true;
            break;
        case 0x70:
            /* 00111000 00111000 0....... ........ */
            /* insns.decode:429 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fstx_s(ctx, &u.f_frr)) return true;
            break;
        case 0x78:
            /* 00111000 00111100 0....... ........ */
            /* insns.decode:430 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fstx_d(ctx, &u.f_frr)) return true;
            break;
        case 0xc0:
            /* 00111000 01100000 0....... ........ */
            /* insns.decode:260 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amswap_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xc1:
            /* 00111000 01100000 1....... ........ */
            /* insns.decode:261 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amswap_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xc2:
            /* 00111000 01100001 0....... ........ */
            /* insns.decode:262 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amadd_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xc3:
            /* 00111000 01100001 1....... ........ */
            /* insns.decode:263 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amadd_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xc4:
            /* 00111000 01100010 0....... ........ */
            /* insns.decode:264 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amand_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xc5:
            /* 00111000 01100010 1....... ........ */
            /* insns.decode:265 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amand_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xc6:
            /* 00111000 01100011 0....... ........ */
            /* insns.decode:266 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amor_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xc7:
            /* 00111000 01100011 1....... ........ */
            /* insns.decode:267 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amor_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xc8:
            /* 00111000 01100100 0....... ........ */
            /* insns.decode:268 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amxor_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xc9:
            /* 00111000 01100100 1....... ........ */
            /* insns.decode:269 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amxor_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xca:
            /* 00111000 01100101 0....... ........ */
            /* insns.decode:270 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammax_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xcb:
            /* 00111000 01100101 1....... ........ */
            /* insns.decode:271 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammax_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xcc:
            /* 00111000 01100110 0....... ........ */
            /* insns.decode:272 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammin_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xcd:
            /* 00111000 01100110 1....... ........ */
            /* insns.decode:273 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammin_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xce:
            /* 00111000 01100111 0....... ........ */
            /* insns.decode:274 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammax_wu(ctx, &u.f_rrr)) return true;
            break;
        case 0xcf:
            /* 00111000 01100111 1....... ........ */
            /* insns.decode:275 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammax_du(ctx, &u.f_rrr)) return true;
            break;
        case 0xd0:
            /* 00111000 01101000 0....... ........ */
            /* insns.decode:276 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammin_wu(ctx, &u.f_rrr)) return true;
            break;
        case 0xd1:
            /* 00111000 01101000 1....... ........ */
            /* insns.decode:277 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammin_du(ctx, &u.f_rrr)) return true;
            break;
        case 0xd2:
            /* 00111000 01101001 0....... ........ */
            /* insns.decode:278 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amswap_db_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xd3:
            /* 00111000 01101001 1....... ........ */
            /* insns.decode:279 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amswap_db_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xd4:
            /* 00111000 01101010 0....... ........ */
            /* insns.decode:280 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amadd_db_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xd5:
            /* 00111000 01101010 1....... ........ */
            /* insns.decode:281 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amadd_db_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xd6:
            /* 00111000 01101011 0....... ........ */
            /* insns.decode:282 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amand_db_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xd7:
            /* 00111000 01101011 1....... ........ */
            /* insns.decode:283 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amand_db_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xd8:
            /* 00111000 01101100 0....... ........ */
            /* insns.decode:284 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amor_db_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xd9:
            /* 00111000 01101100 1....... ........ */
            /* insns.decode:285 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amor_db_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xda:
            /* 00111000 01101101 0....... ........ */
            /* insns.decode:286 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amxor_db_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xdb:
            /* 00111000 01101101 1....... ........ */
            /* insns.decode:287 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_amxor_db_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xdc:
            /* 00111000 01101110 0....... ........ */
            /* insns.decode:288 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammax_db_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xdd:
            /* 00111000 01101110 1....... ........ */
            /* insns.decode:289 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammax_db_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xde:
            /* 00111000 01101111 0....... ........ */
            /* insns.decode:290 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammin_db_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xdf:
            /* 00111000 01101111 1....... ........ */
            /* insns.decode:291 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammin_db_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xe0:
            /* 00111000 01110000 0....... ........ */
            /* insns.decode:292 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammax_db_wu(ctx, &u.f_rrr)) return true;
            break;
        case 0xe1:
            /* 00111000 01110000 1....... ........ */
            /* insns.decode:293 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammax_db_du(ctx, &u.f_rrr)) return true;
            break;
        case 0xe2:
            /* 00111000 01110001 0....... ........ */
            /* insns.decode:294 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammin_db_wu(ctx, &u.f_rrr)) return true;
            break;
        case 0xe3:
            /* 00111000 01110001 1....... ........ */
            /* insns.decode:295 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ammin_db_du(ctx, &u.f_rrr)) return true;
            break;
        case 0xe4:
            /* 00111000 01110010 0....... ........ */
            /* insns.decode:230 */
            decode_extract_i15(ctx, &u.f_i, insn);
            if (trans_dbar(ctx, &u.f_i)) return true;
            break;
        case 0xe5:
            /* 00111000 01110010 1....... ........ */
            /* insns.decode:231 */
            decode_extract_i15(ctx, &u.f_i, insn);
            if (trans_ibar(ctx, &u.f_i)) return true;
            break;
        case 0xe8:
            /* 00111000 01110100 0....... ........ */
            /* insns.decode:431 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fldgt_s(ctx, &u.f_frr)) return true;
            break;
        case 0xe9:
            /* 00111000 01110100 1....... ........ */
            /* insns.decode:432 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fldgt_d(ctx, &u.f_frr)) return true;
            break;
        case 0xea:
            /* 00111000 01110101 0....... ........ */
            /* insns.decode:433 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fldle_s(ctx, &u.f_frr)) return true;
            break;
        case 0xeb:
            /* 00111000 01110101 1....... ........ */
            /* insns.decode:434 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fldle_d(ctx, &u.f_frr)) return true;
            break;
        case 0xec:
            /* 00111000 01110110 0....... ........ */
            /* insns.decode:435 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fstgt_s(ctx, &u.f_frr)) return true;
            break;
        case 0xed:
            /* 00111000 01110110 1....... ........ */
            /* insns.decode:436 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fstgt_d(ctx, &u.f_frr)) return true;
            break;
        case 0xee:
            /* 00111000 01110111 0....... ........ */
            /* insns.decode:437 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fstle_s(ctx, &u.f_frr)) return true;
            break;
        case 0xef:
            /* 00111000 01110111 1....... ........ */
            /* insns.decode:438 */
            decode_extract_frr(ctx, &u.f_frr, insn);
            if (trans_fstle_d(ctx, &u.f_frr)) return true;
            break;
        case 0xf0:
            /* 00111000 01111000 0....... ........ */
            /* insns.decode:236 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldgt_b(ctx, &u.f_rrr)) return true;
            break;
        case 0xf1:
            /* 00111000 01111000 1....... ........ */
            /* insns.decode:237 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldgt_h(ctx, &u.f_rrr)) return true;
            break;
        case 0xf2:
            /* 00111000 01111001 0....... ........ */
            /* insns.decode:238 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldgt_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xf3:
            /* 00111000 01111001 1....... ........ */
            /* insns.decode:239 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldgt_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xf4:
            /* 00111000 01111010 0....... ........ */
            /* insns.decode:240 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldle_b(ctx, &u.f_rrr)) return true;
            break;
        case 0xf5:
            /* 00111000 01111010 1....... ........ */
            /* insns.decode:241 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldle_h(ctx, &u.f_rrr)) return true;
            break;
        case 0xf6:
            /* 00111000 01111011 0....... ........ */
            /* insns.decode:242 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldle_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xf7:
            /* 00111000 01111011 1....... ........ */
            /* insns.decode:243 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_ldle_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xf8:
            /* 00111000 01111100 0....... ........ */
            /* insns.decode:244 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stgt_b(ctx, &u.f_rrr)) return true;
            break;
        case 0xf9:
            /* 00111000 01111100 1....... ........ */
            /* insns.decode:245 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stgt_h(ctx, &u.f_rrr)) return true;
            break;
        case 0xfa:
            /* 00111000 01111101 0....... ........ */
            /* insns.decode:246 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stgt_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xfb:
            /* 00111000 01111101 1....... ........ */
            /* insns.decode:247 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stgt_d(ctx, &u.f_rrr)) return true;
            break;
        case 0xfc:
            /* 00111000 01111110 0....... ........ */
            /* insns.decode:248 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stle_b(ctx, &u.f_rrr)) return true;
            break;
        case 0xfd:
            /* 00111000 01111110 1....... ........ */
            /* insns.decode:249 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stle_h(ctx, &u.f_rrr)) return true;
            break;
        case 0xfe:
            /* 00111000 01111111 0....... ........ */
            /* insns.decode:250 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stle_w(ctx, &u.f_rrr)) return true;
            break;
        case 0xff:
            /* 00111000 01111111 1....... ........ */
            /* insns.decode:251 */
            decode_extract_rrr(ctx, &u.f_rrr, insn);
            if (trans_stle_d(ctx, &u.f_rrr)) return true;
            break;
        }
        break;
    case 0x10:
        /* 010000.. ........ ........ ........ */
        /* insns.decode:443 */
        decode_extract_r_offs21(ctx, &u.f_r_offs, insn);
        if (trans_beqz(ctx, &u.f_r_offs)) return true;
        break;
    case 0x11:
        /* 010001.. ........ ........ ........ */
        /* insns.decode:444 */
        decode_extract_r_offs21(ctx, &u.f_r_offs, insn);
        if (trans_bnez(ctx, &u.f_r_offs)) return true;
        break;
    case 0x12:
        /* 010010.. ........ ........ ........ */
        decode_extract_c_offs21(ctx, &u.f_c_offs, insn);
        switch ((insn >> 8) & 0x3) {
        case 0x0:
            /* 010010.. ........ ......00 ........ */
            /* insns.decode:445 */
            if (trans_bceqz(ctx, &u.f_c_offs)) return true;
            break;
        case 0x1:
            /* 010010.. ........ ......01 ........ */
            /* insns.decode:446 */
            if (trans_bcnez(ctx, &u.f_c_offs)) return true;
            break;
        }
        break;
    case 0x13:
        /* 010011.. ........ ........ ........ */
        /* insns.decode:447 */
        decode_extract_rr_offs16(ctx, &u.f_rr_offs, insn);
        if (trans_jirl(ctx, &u.f_rr_offs)) return true;
        break;
    case 0x14:
        /* 010100.. ........ ........ ........ */
        /* insns.decode:448 */
        decode_extract_offs26(ctx, &u.f_offs, insn);
        if (trans_b(ctx, &u.f_offs)) return true;
        break;
    case 0x15:
        /* 010101.. ........ ........ ........ */
        /* insns.decode:449 */
        decode_extract_offs26(ctx, &u.f_offs, insn);
        if (trans_bl(ctx, &u.f_offs)) return true;
        break;
    case 0x16:
        /* 010110.. ........ ........ ........ */
        /* insns.decode:450 */
        decode_extract_rr_offs16(ctx, &u.f_rr_offs, insn);
        if (trans_beq(ctx, &u.f_rr_offs)) return true;
        break;
    case 0x17:
        /* 010111.. ........ ........ ........ */
        /* insns.decode:451 */
        decode_extract_rr_offs16(ctx, &u.f_rr_offs, insn);
        if (trans_bne(ctx, &u.f_rr_offs)) return true;
        break;
    case 0x18:
        /* 011000.. ........ ........ ........ */
        /* insns.decode:452 */
        decode_extract_rr_offs16(ctx, &u.f_rr_offs, insn);
        if (trans_blt(ctx, &u.f_rr_offs)) return true;
        break;
    case 0x19:
        /* 011001.. ........ ........ ........ */
        /* insns.decode:453 */
        decode_extract_rr_offs16(ctx, &u.f_rr_offs, insn);
        if (trans_bge(ctx, &u.f_rr_offs)) return true;
        break;
    case 0x1a:
        /* 011010.. ........ ........ ........ */
        /* insns.decode:454 */
        decode_extract_rr_offs16(ctx, &u.f_rr_offs, insn);
        if (trans_bltu(ctx, &u.f_rr_offs)) return true;
        break;
    case 0x1b:
        /* 011011.. ........ ........ ........ */
        /* insns.decode:455 */
        decode_extract_rr_offs16(ctx, &u.f_rr_offs, insn);
        if (trans_bgeu(ctx, &u.f_rr_offs)) return true;
        break;
    }
    return false;
}
